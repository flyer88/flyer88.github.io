<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>flyer</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dove.im/"/>
  <updated>2016-11-23T05:37:58.000Z</updated>
  <id>http://dove.im/</id>
  
  <author>
    <name>flyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dagger2 学习(三)- scope 使用</title>
    <link href="http://dove.im/2016/11/21/dagger2-%E5%AD%A6%E4%B9%A0-%E4%B8%89-scope-%E4%BD%BF%E7%94%A8/"/>
    <id>http://dove.im/2016/11/21/dagger2-学习-三-scope-使用/</id>
    <published>2016-11-21T07:56:30.000Z</published>
    <updated>2016-11-23T05:37:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Scope"><a href="#关于Scope" class="headerlink" title="关于Scope"></a>关于<code>Scope</code></h2><p>Dagger 2 自带的 <code>Scope</code> 只有一个 <code>@Singleton</code> ，其他的可以通过自定义来实现</p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A03Scope-%E4%BD%BF%E7%94%A8" target="_blank" rel="external">本文代码</a></p>
<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><h4 id="1-Scope-的作用，就是提供在当前-Component-实例-范围内的单例。"><a href="#1-Scope-的作用，就是提供在当前-Component-实例-范围内的单例。" class="headerlink" title="(1)  Scope 的作用，就是提供在当前 Component 实例 范围内的单例。"></a>(1)  <code>Scope</code> 的作用，就是提供在当前 <code>Component</code> 实例 范围内的单例。</h4><p>假设 DaggerUserComponent 能够提供 User 实例</p>
<p>UserComponent 被自定义的  <code>@UserScope</code> 标注，那就意味着</p>
<p>一旦一个 DaggerUserComponent 实例创建完成，</p>
<p>那么其调用 injectTo 方法，进行注入时，所有注入的 <code>User</code> 对象都是同一个实例</p>
<p>知道 DaggerUserComponent 被重新创建，才会提供一个不一样的<code>User</code>实例</p>
<h4 id="2-Scope-的使用方法"><a href="#2-Scope-的使用方法" class="headerlink" title="(2) @Scope 的使用方法"></a>(2) <code>@Scope</code> 的使用方法</h4><p> 第一种</p>
<ol>
<li><code>@Scope</code> 注解整个 <code>Bean</code> 对象，<code>@inject</code> 注解对应 <code>Bean</code> 对象的构造方法</li>
<li><code>@Scope</code> 还需要在 <code>Bean</code> 对象注入，出现的 <code>Component</code> 中标注</li>
</ol>
<p>第二种</p>
<ol>
<li><code>@Scope</code> 配合 在<code>Module</code> 中使用，配合 <code>@Provides</code> 一起标注</li>
<li><code>@Scope</code> 需要在 <code>Module</code> 出现的 <code>Component</code> 中标注</li>
</ol>
<p>两种方法，其实就是两种提供实例的不同实现，对比前面 一二两篇文章即可看出</p>
<p>第一种是最简单注入时，加上<code>@Scope</code> </p>
<p>第二种是配合<code>@Module</code> 注入式，加上<code>@Scope</code></p>
<hr>
<h3 id="2-进行实践操作"><a href="#2-进行实践操作" class="headerlink" title="2. 进行实践操作"></a>2. 进行实践操作</h3><h4 id="1-整体结构构建"><a href="#1-整体结构构建" class="headerlink" title="(1) 整体结构构建"></a>(1) 整体结构构建</h4><p>实践的内容主要是针对 <code>@Scope</code> 第二种使用方法</p>
<p>因此这中间<code>@UserScope</code> 只需要添加到 <code>UserModule</code> 和 <code>UserComponent</code> 上</p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A03Scope-%E4%BD%BF%E7%94%A8" target="_blank" rel="external">具体代码</a></p>
<p>整个类的结构</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/代码结构.png" alt="代码结构"></p>
<p>创建三个 <code>Activity</code> 分别用于显示 <code>User</code> 实例</p>
<p>下面贴出部分代码</p>
<p>自定义  <code>UserScope.java</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserScope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	...<span class="comment">//纯 Bean 对象,无任何特殊</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UserComponent.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UserScope</span><span class="comment">// 绑定 UserScope</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;UserModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(ClassARoomActivity classARoomActivity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(ClassBRoomActivity classBRoomActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UserModule.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;</div><div class="line">	...</div><div class="line">    <span class="meta">@UserScope</span><span class="comment">// 绑定 UserScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">User <span class="title">provideUser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>App.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">static</span> UserComponent sUserComponent;</div><div class="line">...</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserComponent <span class="title">getUserComponent</span><span class="params">()</span></span>&#123;<span class="comment">// 获取 DaggerUserComponent 对象</span></div><div class="line">       <span class="keyword">if</span> (sUserComponent == <span class="keyword">null</span>)&#123;</div><div class="line">           sUserComponent = DaggerUserComponent.builder().userModule(<span class="keyword">new</span> UserModule())</div><div class="line">                   .build();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> sUserComponent;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseUserComponent</span><span class="params">()</span></span>&#123; <span class="comment">// 清空 DaggerUserComponent 对象</span></div><div class="line">       sUserComponent = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   ...</div></pre></td></tr></table></figure>
<h4 id="2-具体生成代码和调用分析"><a href="#2-具体生成代码和调用分析" class="headerlink" title="(2) 具体生成代码和调用分析"></a>(2) 具体生成代码和调用分析</h4><h5 id="a-代码生成部分分析"><a href="#a-代码生成部分分析" class="headerlink" title="a. 代码生成部分分析"></a>a. 代码生成部分分析</h5><p><code>DaggerUserComponent.java</code> 部分代码变化</p>
<p>未加上 <code>@UserScope</code> 时，<code>provideUserProvider</code> 的生成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.provideUserProvider = UserModule_ProvideUserFactory.create(builder.userModule);</div></pre></td></tr></table></figure>
<p>加上 <code>@UserScope</code> 后，<code>provideUserProvider</code> 的生成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.provideUserProvider =</div><div class="line">    DoubleCheck.provider(UserModule_ProvideUserFactory.create(builder.userModule));</div></pre></td></tr></table></figure>
<blockquote>
<p>注意，虽然此处的 <code>provideUserProvider</code> 依然是 <code>Provider&lt;User&gt;</code> </p>
<p>但是，其实它的实例已经是 <code>DoubleCheck&lt;User&gt;</code> 类型的。</p>
</blockquote>
<p>跟进这个<code>DoubleCheck.provider()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Provider&lt;T&gt; <span class="title">provider</span><span class="params">(Provider&lt;T&gt; delegate)</span> </span>&#123;</div><div class="line">   checkNotNull(delegate);</div><div class="line">   <span class="keyword">if</span> (delegate <span class="keyword">instanceof</span> DoubleCheck) &#123;</div><div class="line"><span class="comment">// 如果是 DoubleCheck 的实例，直接返回</span></div><div class="line">     <span class="keyword">return</span> delegate;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 否则创建一个，此处的 delegate 就是 UserModule_ProvideUserFactory.create(builder.userModule)</span></div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DoubleCheck&lt;T&gt;(delegate);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>跟进构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">DoubleCheck</span><span class="params">(Provider&lt;T&gt; provider)</span> </span>&#123;</div><div class="line">  <span class="keyword">assert</span> provider != <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">this</span>.provider = provider;</div><div class="line">  <span class="comment">// 啥都没有，就是赋值了一个 provider 引用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以综上，可以判断出，和之前的没有<code>@UserScope</code> 注解对比，具体的实例提供者改变了，不是生成<code>UserModule_ProvideUserFactory</code> 对象了，变成了<code>DoubleCheck&lt;User&gt;</code> 对象，其内部持有一个 <code>UserModule_ProvideUserFactory</code> 的引用。</p>
<h5 id="b-整体调用链"><a href="#b-整体调用链" class="headerlink" title="b.整体调用链"></a>b.整体调用链</h5><p> <code>DaggerUserComponent.injectTo</code> -&gt; <code>ClassARoomActivity_MembersInjector.injectMembers()</code> -&gt; <code>mUserProvider.get()</code> -&gt; <code>DoubleCheck&lt;User&gt;.get()</code></p>
<p>下面进行具体分析</p>
<ul>
<li><p><code>DaggerUserComponent.injectTo</code> -&gt; <code>ClassARoomActivity_MembersInjector.injectMembers()</code> 部分</p>
<p>因此其调用的实例也有了对应的改变，对应的<code>xxxInjector.java</code> 的<code>injectMemebers</code> 方法在调用时，会调用不同的实例</p>
<p>该部分代码和之前并无区别，主要是运行时，实例的区别    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(ClassARoomActivity classARoomActivity)</span> </span>&#123;</div><div class="line">  classARoomActivityMembersInjector.injectMembers(classARoomActivity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(ClassARoomActivity instance)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">  &#125;</div><div class="line">  instance.mUser = mUserProvider.get();<span class="comment">// 注意该部分会调用不同的实例对应的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mUserProvider.get()</code> -&gt; <code>DoubleCheck&lt;User&gt;.get()</code></p>
<p>未加上<code>@UserScop</code> 时，实例是 <code>UserModule_ProvideUserFactory</code></p>
<p>调用的是<code>UserModule_ProvideUserFactory.java</code> 中的方法，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> Preconditions.checkNotNull(</div><div class="line">    <span class="keyword">module</span>.provideUser(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加上<code>@UserScop</code> 时，实例是<code>DoubleCheck&lt;User&gt;</code></p>
<p>调用的是 <code>DoubleCheck&lt;T&gt;</code> 中的方法，如下，该部分也是实现 <code>Scope</code> 功能重要的一部分  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">            Object result = instance;</div><div class="line">            <span class="keyword">if</span> (result == UNINITIALIZED) &#123;<span class="comment">// 如果该对象从来没有初始化，那就初始化一次</span></div><div class="line">              <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                result = instance;<span class="comment">// 获取最新实例，防止线程之间同时修改</span></div><div class="line">                <span class="keyword">if</span> (result == UNINITIALIZED) &#123;</div><div class="line">                  result = provider.get();<span class="comment">// 此处依旧调用了 UserModule_ProvideUserFactory.get() 方法</span></div><div class="line">                  Object currentInstance = instance;</div><div class="line">                  <span class="keyword">if</span> (currentInstance != UNINITIALIZED &amp;&amp; currentInstance != result) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Scoped provider was invoked recursively returning "</span></div><div class="line"> + <span class="string">"different results: "</span> + currentInstance + <span class="string">" &amp; "</span> + result);</div><div class="line">            &#125;</div><div class="line">       instance = result;</div><div class="line">       <span class="comment">// 赋值最新的值</span></div><div class="line">       provider = <span class="keyword">null</span>;</div><div class="line">       <span class="comment">// 初始化一次以后，该对象对应的 Provider 在当前 Scope 中其实已经没有意义了，</span></div><div class="line">       <span class="comment">// 所以直接置为空，方便 GC 回收</span></div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> (T) result;<span class="comment">// 返回结果</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意，Provider 的置空</p>
<p>此处的置空不会影响数据的获取，该 <code>provider</code> 的引用就是下面方法中的 <code>UserModule_ProvideUserFactory.create(builder.userModule)</code> 对</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="keyword">this</span>.provideUserProvider =  DoubleCheck.provider(UserModule_ProvideUserFactory.create(builder.userModule));</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<hr>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>总结：</p>
<p><code>@UserScope</code> 作用于 <code>Component</code> 生命周期内</p>
<p>限制了被标注的实例提供者，只会实例化该对象一次，之后会抛弃对应的 <code>Provider</code> ，然后永远获取之前创建的<code>User</code></p>
<blockquote>
<p> <code>@UserScope @Provides provideUser()</code> ==&gt; <code>UserModule_ProviderUserFactory</code></p>
<p> 此处抛弃的就是 <code>UserModule_ProviderUserFactory</code> 的实例</p>
</blockquote>
<p>只有当实例化的 <code>Component</code> 对象被重新构建，被标注的实例提供者才会重新创建</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/Dagger2%20%E5%AD%A6%E4%B9%A0%28%E4%B8%89%29.png" alt="Dagger2 学习(三)"></p>
<blockquote>
<p>一家之言，仅供参考</p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A03Scope-%E4%BD%BF%E7%94%A8" target="_blank" rel="external">本文代码</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于Scope&quot;&gt;&lt;a href=&quot;#关于Scope&quot; class=&quot;headerlink&quot; title=&quot;关于Scope&quot;&gt;&lt;/a&gt;关于&lt;code&gt;Scope&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Dagger 2 自带的 &lt;code&gt;Scope&lt;/code&gt; 只有一个 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧] LayoutInflater 源码流程记录</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-LayoutInflater-%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://dove.im/2016/11/19/旧-LayoutInflater-源码流程记录/</id>
    <published>2016-11-19T06:30:12.000Z</published>
    <updated>2016-11-19T06:35:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>走了一遍 LayoutInflater的流程，特此记录</p>
<h3 id="获取-LayoutInflater-—-LayoutInflater-from-context"><a href="#获取-LayoutInflater-—-LayoutInflater-from-context" class="headerlink" title="获取 LayoutInflater — LayoutInflater.from(context)"></a>获取 LayoutInflater — <code>LayoutInflater.from(context)</code></h3><p>获取LayoutInflater对象实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取 layoutInflater，注意这是一个IPC的过程，获取的实例是PhoneLayoutInflater，与LayoutInflater 区别不大，重写了protected View onCreateView(String name, AttributeSet attrs) 函数，具体可以去看源码，位置是frameworks/base/core/java.com.android.internal.policy.impl</span></div><div class="line">            LayoutInflater LayoutInflater =</div><div class="line">                    (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">        <span class="comment">//如果为空抛出错误       </span></div><div class="line">            <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"LayoutInflater not found."</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="comment">//返回值</span></div><div class="line">                    <span class="keyword">return</span> LayoutInflater;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="调用Inflate-–-LayoutInflater-from-context-inflate-R-layout-activity-layout-null-false"><a href="#调用Inflate-–-LayoutInflater-from-context-inflate-R-layout-activity-layout-null-false" class="headerlink" title="调用Inflate – LayoutInflater.from(context).inflate(R.layout.activity_layout,null,false)"></a>调用Inflate – <code>LayoutInflater.from(context).inflate(R.layout.activity_layout,null,false)</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(<span class="keyword">int</span> resource, ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">       <span class="comment">//获取resource对象</span></div><div class="line">       <span class="keyword">final</span> Resources res = getContext().getResources();</div><div class="line">       ...</div><div class="line">       <span class="comment">//把R.layout.activity_layout 放入，获取整个 Xml的Parser</span></div><div class="line">       <span class="keyword">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">// 开始真正的inflate</span></div><div class="line">           <span class="keyword">return</span> inflate(parser, root, attachToRoot);</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           parser.close();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="inflate-XmlPullParser-parser-ViewGroup-root-boolean-attachToRoot-是整个inflate的核心部分"><a href="#inflate-XmlPullParser-parser-ViewGroup-root-boolean-attachToRoot-是整个inflate的核心部分" class="headerlink" title="inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)是整个inflate的核心部分"></a><code>inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)</code>是整个<code>inflate</code>的核心部分</h3><p>整体流程：<br>找到最外层的父级布局 ===》 处理<code>merge</code>节点情况 ===》实例化父级布局 ===》根据父级布局，调用<code>rInflate</code>函数去实例化子级<code>view</code> ===&gt; 根据实例化结果，以及外部参数，进行<code>view</code>的添加以及结果的返回</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">    <span class="comment">//同步进入</span></div><div class="line">    <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</div><div class="line">        <span class="comment">// 解析返回 attrs</span></div><div class="line">        <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class="line">        <span class="comment">// </span></div><div class="line">        Context lastContext = (Context)mConstructorArgs[<span class="number">0</span>];</div><div class="line">        mConstructorArgs[<span class="number">0</span>] = mContext;</div><div class="line">        <span class="comment">// 传入的 viewgroup 是 null</span></div><div class="line">        View result = root;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 此处尝试寻找开始和结束节点，即找到整个layout的最外层 view</span></div><div class="line">            <span class="keyword">int</span> type;</div><div class="line">            <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class="line">                    type != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">                <span class="comment">// Empty</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果 type != 开始节点抛出错误，也就是说没找到开始节点</span></div><div class="line">            <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</div><div class="line">                        * <span class="string">": No start tag found!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 获取当前节点的名字，也就是当前layout的根节点的名字</span></div><div class="line">            <span class="keyword">final</span> String name = parser.getName();</div><div class="line">            </div><div class="line">            ...</div><div class="line">            <span class="comment">//处理 merge 节点</span></div><div class="line">            <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></div><div class="line">                            * <span class="string">"ViewGroup root and attachToRoot=true"</span>);</div><div class="line">                &#125;</div><div class="line">                rInflate(parser, root, attrs, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不是merge的情况下</span></div><div class="line">                <span class="comment">// createViewFromTag 该方法是根据前面获取的 tag 的名字，创建具体的view对象</span></div><div class="line">                <span class="comment">// 此处特殊的地方时，Temp 就是根节点，也就是整个layout的根节点，因为 name 是前面获取的根节点的名字</span></div><div class="line">                <span class="keyword">final</span> View temp = createViewFromTag(root, name, attrs, <span class="keyword">false</span>);</div><div class="line">                <span class="comment">// 初始化 params</span></div><div class="line">                ViewGroup.LayoutParams params = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;<span class="comment">// root != 空，会初始化出一个 params</span></div><div class="line">                    </div><div class="line">                    ...</div><div class="line">                    <span class="comment">// 如果提供了root，会根据 root 创建 layout params </span></div><div class="line">                    params = root.generateLayoutParams(attrs);</div><div class="line">                    <span class="keyword">if</span> (!attachToRoot) &#123;</div><div class="line">                        <span class="comment">// Set the layout params for temp if we are not</span></div><div class="line">                        <span class="comment">// attaching. (If we are, we use addView, below)</span></div><div class="line">                        temp.setLayoutParams(params);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                ...</div><div class="line">                <span class="comment">// 此处，会进行所有的 temp 的子 view 的 inflate</span></div><div class="line">                rInflate(parser, temp, attrs, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">                </div><div class="line">                ...</div><div class="line">                <span class="comment">// We are supposed to attach all the views we found (int temp)</span></div><div class="line">                <span class="comment">// to root. Do that now.</span></div><div class="line">                <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</div><div class="line">                    root.addView(temp, params);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Decide whether to return the root that was passed in or the</span></div><div class="line">                <span class="comment">// top view found in xml.</span></div><div class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                    result = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// Don't retain static reference on context.</span></div><div class="line">            mConstructorArgs[<span class="number">0</span>] = lastContext;</div><div class="line">            mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中整个流程中，核心部分分两点<br>1.实例化父级布局，<br>2.实例化子级<code>view</code>。<br>而对于<code>merge</code>节点的处理情况是将其当做子<code>view</code>进行处理，调用的都是<code>rInflate</code>函数，所以，我们讨论子<code>view</code>实例化的时候可以一起讨论。</p>
<h4 id="首先是看第一部分，父布局temp的实例化。"><a href="#首先是看第一部分，父布局temp的实例化。" class="headerlink" title="首先是看第一部分，父布局temp的实例化。"></a>首先是看第一部分，父布局<code>temp</code>的实例化。</h4><p>他是直接调用<code>createViewFromTag</code>，我们进入该函数。这个函数整体的流程是<br>处理特殊节点<code>view</code> ===》 对当前<code>view</code>的context进行初始化 ====》 特殊节点<code>blink</code>处理 ===》根据几个工厂对象(默认情况下，工程类都为null)实例化<code>view</code> ===》 工厂类创建失败，<code>view == null</code>，调用<code>onCreateView()</code>或者<code>createView()</code>对<code>view</code>进行实例化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="function">View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, AttributeSet attrs, <span class="keyword">boolean</span> inheritContext)</span> </span>&#123;</div><div class="line">    <span class="comment">// 特殊处理 `view` 节点</span></div><div class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"view"</span>)) &#123;</div><div class="line">        name = attrs.getAttributeValue(<span class="keyword">null</span>, <span class="string">"class"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置当前 view 的 context</span></div><div class="line">    Context viewContext;</div><div class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; inheritContext) &#123;</div><div class="line">        <span class="comment">// 如果父级 view 不为空 并且要求从父级 view 那里获取 context</span></div><div class="line">        viewContext = parent.getContext();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 否则 当前 view 的 context 等于 LayoutInflater.fromt(context) 中传入的 context</span></div><div class="line">        viewContext = mContext;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果有主题切换，那么就应用对应的主题</span></div><div class="line">    <span class="keyword">final</span> TypedArray ta = viewContext.obtainStyledAttributes(attrs, ATTRS_THEME);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> themeResId = ta.getResourceId(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (themeResId != <span class="number">0</span>) &#123;</div><div class="line">        viewContext = <span class="keyword">new</span> ContextThemeWrapper(viewContext, themeResId);</div><div class="line">    &#125;</div><div class="line">    ta.recycle();</div><div class="line">    <span class="comment">// blink 处理</span></div><div class="line">    <span class="keyword">if</span> (name.equals(TAG_1995)) &#123;</div><div class="line">        <span class="comment">// Let's party like it's 1995!</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlinkLayout(viewContext, attrs);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 用工厂类创建真正的 view 对象</span></div><div class="line">        <span class="comment">// 默认两个工厂类都为 null</span></div><div class="line">        <span class="comment">// 所以 view 是 null</span></div><div class="line">        View view;</div><div class="line">        <span class="keyword">if</span> (mFactory2 != <span class="keyword">null</span>) &#123;</div><div class="line">            view = mFactory2.onCreateView(parent, name, viewContext, attrs);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFactory != <span class="keyword">null</span>) &#123;</div><div class="line">            view = mFactory.onCreateView(name, viewContext, attrs);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            view = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 在 view 用前面两个工厂类创建为 null </span></div><div class="line">        <span class="comment">// 同时私有工厂类不为空的情况下，调用私有的工厂类创建 view 对象</span></div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; mPrivateFactory != <span class="keyword">null</span>) &#123;</div><div class="line">            view = mPrivateFactory.onCreateView(parent, name, viewContext, attrs);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 私有工厂创建依旧为 null 时</span></div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> Object lastContext = mConstructorArgs[<span class="number">0</span>];</div><div class="line">            mConstructorArgs[<span class="number">0</span>] = viewContext;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;<span class="comment">// 如果是 Android 自带 view</span></div><div class="line">                    view = onCreateView(parent, name, attrs);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果不是 Android 自带 view</span></div><div class="line">                    view = createView(name, <span class="keyword">null</span>, attrs);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mConstructorArgs[<span class="number">0</span>] = lastContext;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125; <span class="keyword">catch</span> (InflateException e) &#123;</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中这个函数的核心部分则是<code>onCreateView()</code>和<code>createView()</code>，因为默认情况下，几个factory都是null，所以都会进入这两个函数中的一个。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;<span class="comment">// 如果是 Android 自带 view</span></div><div class="line">    view = onCreateView(parent, name, attrs);</div><div class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果不是 Android 自带 view</span></div><div class="line">    view = createView(name, <span class="keyword">null</span>, attrs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个函数调用条件是，<code>-1 == name.indexOf(&#39;.&#39;)</code>，而其效果则是，判断是否为<code>Android</code>自带 <code>view</code>，如果是，则调用<code>onCreateView()</code>,否则当做自定义<code>view</code>处理，调用<code>createView()</code></p>
<p>先看<code>onCreateView</code>，该部分主要是对<code>sClassPrefixList</code>进行迭代，拼凑出整个<code>view</code>的路径，然后调用<code>createView()</code>，注意这个函数，和上面说的处理自定义<code>view</code>的<code>createView()</code>，是同一个函数，所以也就明白，为什么要有上面的判断了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</div><div class="line">    <span class="string">"android.widget."</span>,</div><div class="line">    <span class="string">"android.webkit."</span>,</div><div class="line">    <span class="string">"android.app."</span></div><div class="line">&#125;;</div><div class="line"> ....</div><div class="line"> ....</div><div class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> View <span class="title">onCreateView</span><span class="params">(String name, AttributeSet attrs)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">    <span class="keyword">for</span> (String prefix : sClassPrefixList) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            View view = createView(name, prefix, attrs);</div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> view;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(name, attrs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们看真正的动态创建出<code>view</code>对象的函数<code>createView(String name, String prefix, AttributeSet attrs)</code>，该函数的作用就是，通过反射创建出真正的对象<br>其过程也很简单，直接在已经存在的<code>sConstructorMap</code>中找，是不是有这个名字，如果有就开始创建，没有就把前缀拼上去，再创建，然后放入<code>sConstructorMap</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">createView</span><span class="params">(String name, String prefix, AttributeSet attrs)</span></span></div><div class="line">            <span class="keyword">throws</span> ClassNotFoundException, InflateException &#123;</div><div class="line">        Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</div><div class="line">        Class&lt;? extends View&gt; clazz = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);</div><div class="line">            <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Class not found in the cache, see if it's real, and try to add it</span></div><div class="line">                clazz = mContext.getClassLoader().loadClass(</div><div class="line">                        prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (mFilter != <span class="keyword">null</span> &amp;&amp; clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">boolean</span> allowed = mFilter.onLoadClass(clazz);</div><div class="line">                    <span class="keyword">if</span> (!allowed) &#123;</div><div class="line">                        failNotAllowed(name, prefix, attrs);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                constructor = clazz.getConstructor(mConstructorSignature);</div><div class="line">                sConstructorMap.put(name, constructor);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// If we have a filter, apply it to cached constructor</span></div><div class="line">                <span class="keyword">if</span> (mFilter != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// Have we seen this name before?</span></div><div class="line">                    Boolean allowedState = mFilterMap.get(name);</div><div class="line">                    <span class="keyword">if</span> (allowedState == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// New class -- remember whether it is allowed</span></div><div class="line">                        clazz = mContext.getClassLoader().loadClass(</div><div class="line">                                prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</div><div class="line">                        </div><div class="line">                        <span class="keyword">boolean</span> allowed = clazz != <span class="keyword">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</div><div class="line">                        mFilterMap.put(name, allowed);</div><div class="line">                        <span class="keyword">if</span> (!allowed) &#123;</div><div class="line">                            failNotAllowed(name, prefix, attrs);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</div><div class="line">                        failNotAllowed(name, prefix, attrs);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Object[] args = mConstructorArgs;</div><div class="line">            args[<span class="number">1</span>] = attrs;</div><div class="line">            constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">final</span> View view = constructor.newInstance(args);</div><div class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewStub) &#123;</div><div class="line">                <span class="comment">// Use the same context when inflating ViewStub later.</span></div><div class="line">                <span class="keyword">final</span> ViewStub viewStub = (ViewStub) view;</div><div class="line">                viewStub.setLayoutInflater(cloneInContext((Context) args[<span class="number">0</span>]));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> view;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="然后是子布局的实例化"><a href="#然后是子布局的实例化" class="headerlink" title="然后是子布局的实例化"></a>然后是子布局的实例化</h4><p>该部分内容，主要是对当前节点的所有view 进行遍历，然后调用<code>createViewFromTag()</code>(该方法上面已经有解释了)方法创建实例。如果遍历到某一个view，他是有子节点的，则递归调用函数<code>rInflate()</code>对该子节点进行遍历。该部分参考下面的流程图，看起来更加清晰。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rInflate</span><span class="params">(XmlPullParser parser, View parent, <span class="keyword">final</span> AttributeSet attrs,</span></span></div><div class="line">        <span class="keyword">boolean</span> finishInflate, <span class="keyword">boolean</span> inheritContext) <span class="keyword">throws</span> XmlPullParserException,</div><div class="line">        IOException &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> depth = parser.getDepth();</div><div class="line">    <span class="keyword">int</span> type;</div><div class="line">    <span class="keyword">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class="line">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">        <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String name = parser.getName();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class="line">            parseRequestFocus(parser, parent);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_TAG.equals(name)) &#123;</div><div class="line">            parseViewTag(parser, parent, attrs);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_INCLUDE.equals(name)) &#123;</div><div class="line">            <span class="keyword">if</span> (parser.getDepth() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;include /&gt; cannot be the root element"</span>);</div><div class="line">            &#125;</div><div class="line">            parseInclude(parser, parent, attrs, inheritContext);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; must be the root element"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">final</span> View view = createViewFromTag(parent, name, attrs, inheritContext);</div><div class="line">            <span class="keyword">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class="line">            <span class="keyword">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class="line">            rInflate(parser, view, attrs, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            viewGroup.addView(view, params);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (finishInflate) parent.onFinishInflate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>===========================<br>以上就是 inflate 整个核心部分。</p>
<p>对于整体的流程，我画了流程图，如下</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;走了一遍 LayoutInflater的流程，特此记录&lt;/p&gt;
&lt;h3 id=&quot;获取-LayoutInflater-—-LayoutInflater-from-context&quot;&gt;&lt;a href=&quot;#获取-LayoutInflater-—-LayoutInflater-fro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧] LayoutInflater 后记--替换系统控件</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-LayoutInflater-%E5%90%8E%E8%AE%B0-%E6%9B%BF%E6%8D%A2%E7%B3%BB%E7%BB%9F%E6%8E%A7%E4%BB%B6/"/>
    <id>http://dove.im/2016/11/19/旧-LayoutInflater-后记-替换系统控件/</id>
    <published>2016-11-19T06:30:00.000Z</published>
    <updated>2016-11-19T06:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前记录了自己走通 <code>LayoutInflater</code> 的源码整体流程，一直想搞个好玩的东西，想起之前看到过的<a href="https://github.com/fengjundev/Android-Skin-Loader" target="_blank" rel="external">换肤方案</a>，决定写个换系统控件的库。<br><a href="https://github.com/flyer88/Pichu" target="_blank" rel="external">项目地址</a>，项目的具体使用，可以看README</p>
<hr>
<h4 id="首先需要确定，LayoutInflater对于Android自带的view读入的名字是没有全名的，具体创建的时候是通过写上前缀，然后借助反射进行实例化的"><a href="#首先需要确定，LayoutInflater对于Android自带的view读入的名字是没有全名的，具体创建的时候是通过写上前缀，然后借助反射进行实例化的" class="headerlink" title="首先需要确定，LayoutInflater对于Android自带的view读入的名字是没有全名的，具体创建的时候是通过写上前缀，然后借助反射进行实例化的"></a>首先需要确定，<code>LayoutInflater</code>对于<code>Android</code>自带的<code>view</code>读入的名字是没有全名的，具体创建的时候是通过写上前缀，然后借助反射进行实例化的</h4><p>举例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line"> ...</div><div class="line"> /&gt;</div></pre></td></tr></table></figure>
<p>作为xml读入以后，是只有<code>TextView</code>的<br>而</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;dove.flyer.xu.mineView </div><div class="line">....    </div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>作为xml读入后，是整个名字存在的，即<code>dove.flyer.xu.mineView</code>，具体细节<a href="">前面文章</a>已经叙述了，此处不重复了</p>
<h4 id="明确，Factory如果可以构建view对象的话，后面的view实例化操作是不会被进行的。"><a href="#明确，Factory如果可以构建view对象的话，后面的view实例化操作是不会被进行的。" class="headerlink" title="明确，Factory如果可以构建view对象的话，后面的view实例化操作是不会被进行的。"></a>明确，<code>Factory</code>如果可以构建<code>view</code>对象的话，后面的<code>view</code>实例化操作是不会被进行的。</h4><p>首先定位到<code>createViewFromTag</code>。<br>源码中，以<code>Factory</code>为例子,如果<code>Factory</code>为空的时候，是不会执行里面代码的，如果设置了，则会执行。而执行后，如果<code>view</code>不为空，则下面的<code>view</code>创建都会失效，也就是说，如果<code>Factory</code>创建成功了<code>view</code>，那么后面创建<code>view</code>部分的代码并不会执行。<code>Facory2</code>也同理。<br>而<code>Factory</code>和<code>Factory2</code>在一开始就是空的，只需要设置好这个<code>Factory</code>，那具体的<code>view</code>创建就会被它俩其中一个接手。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, AttributeSet attrs, <span class="keyword">boolean</span> inheritContext)</span></span>&#123;</div><div class="line">....</div><div class="line">    <span class="keyword">if</span> (mFactory2 != <span class="keyword">null</span>) &#123;</div><div class="line">                    view = mFactory2.onCreateView(parent, name, viewContext, attrs);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFactory != <span class="keyword">null</span>) &#123;</div><div class="line">        view = mFactory.onCreateView(name, viewContext, attrs);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        view = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(view == <span class="keyword">null</span> ...)&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(view == <span class="keyword">null</span> ...)&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="明确Factory是可以被set进去的"><a href="#明确Factory是可以被set进去的" class="headerlink" title="明确Factory是可以被set进去的"></a>明确<code>Factory</code>是可以被<code>set</code>进去的</h4><p>调用<code>getLayoutInflater().setFactory(factory)</code>即可</p>
<h4 id="剩下的就是考虑Activity会在何时才会创建view，自然是setContentView，该方法会触发整个xml的inflate，"><a href="#剩下的就是考虑Activity会在何时才会创建view，自然是setContentView，该方法会触发整个xml的inflate，" class="headerlink" title="剩下的就是考虑Activity会在何时才会创建view，自然是setContentView，该方法会触发整个xml的inflate，"></a>剩下的就是考虑<code>Activity</code>会在何时才会创建<code>view</code>，自然是<code>setContentView</code>，该方法会触发整个<code>xml</code>的<code>inflate</code>，</h4><p>所以剩下的就是在<code>onCreate</code>的时候，在<code>setContentView</code>之前，把自己的<code>Factory</code>给设置进去，把传进来的名字，修改成自己的<code>view</code>就可以了。</p>
<hr>
<p>以上三点拼在一起就可以进行系统控件的同意替换，具体<code>Factory</code>重写的细节请参考源码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前记录了自己走通 &lt;code&gt;LayoutInflater&lt;/code&gt; 的源码整体流程，一直想搞个好玩的东西，想起之前看到过的&lt;a href=&quot;https://github.com/fengjundev/Android-Skin-Loader&quot; target=&quot;_bla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧] Android 贝塞尔曲线，QQ 删除小红点类似效果实现</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%EF%BC%8CQQ-%E5%88%A0%E9%99%A4%E5%B0%8F%E7%BA%A2%E7%82%B9%E7%B1%BB%E4%BC%BC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://dove.im/2016/11/19/旧-Android-贝塞尔曲线，QQ-删除小红点类似效果实现/</id>
    <published>2016-11-19T06:29:51.000Z</published>
    <updated>2016-11-19T06:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p> 看到 QQ 拖动删除小红点的动画效果，就想着做个类似的效果，没找到Android 版的教程，于是就自己撸了一个，代码地址：<a href="https://github.com/flyer88/JellyCircle/tree/master/circleindicator" target="_blank" rel="external">https://github.com/flyer88/JellyCircle/tree/master/circleindicator</a> ，该栗子的实现在circleIndicator包中，app包下是另一个demo，还没写好。</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/indicator-01.gif" alt=""></p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/indicator-02.gif" alt=""></p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/indicator-03.gif" alt=""></p>
<p>注意：为实现上面链接中所示的动画，首先确定，两个圆随着偏移量的改变，半径大小出现了变化，同时贝塞尔曲线有所变化，那剩下的问题就是如何改变两个圆的半径大小，圆的位置，同时计算和绘制贝塞尔曲线</p>
<h1 id="接下来看具体的实现"><a href="#接下来看具体的实现" class="headerlink" title="接下来看具体的实现"></a>接下来看具体的实现</h1><h3 id="首先偏移量"><a href="#首先偏移量" class="headerlink" title="首先偏移量"></a>首先偏移量</h3><p>我此处给的值比较简单，直接通过<code>SeekBar</code>来获取偏移量<br>获取偏移量后，需要改变的数据有，半径大小，以及第二个圆的位置，以及贝塞尔曲线的重新绘制<br>具体代码如下：<br>​        </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mEndCircle.setX(dpToPx(mDefaultFirstX + mMaxDistance * offset,getResources()));<span class="comment">//修改第二个圆的位置</span></div><div class="line">mEndCircle.setRadius(dpToPx(mDefaultMinRadius,getResources()) + offset * dpToPx(mDefaultMaxRadius - mDefaultMinRadius,getResources()));<span class="comment">//第二个圆半径变大</span></div><div class="line">mStartCircle.setRadius(dpToPx(mDefaultMaxRadius,getResources()) - offset * dpToPx(mDefaultMaxRadius - mDefaultMinRadius,getResources()));<span class="comment">//第一个圆半径变小</span></div><div class="line">mCanDrawBezier = calculatePoint(mStartCircle, mEndCircle);<span class="comment">//计算贝塞尔曲线</span></div><div class="line">invalidate();<span class="comment">//刷新，触发onDraw()，重新绘制</span></div></pre></td></tr></table></figure>
<h3 id="然后是计算贝塞尔曲线"><a href="#然后是计算贝塞尔曲线" class="headerlink" title="然后是计算贝塞尔曲线"></a>然后是计算贝塞尔曲线</h3><p>看下图，基本上可以确定出有两条曲线，我没有画两条曲线，而是一条<code>mBezierPath</code>搞定<br>A-&gt;B-&gt;C-&gt;D-&gt;A（关于控制点哦o,p后面会有计算分析，基本按照上图中所写就可以计算出o,p两点的位置）<br><img src="http://ob9rvakdw.bkt.clouddn.com/14-51-38.jpg" alt=""><br>其中，A点是开始点，直接 <code>moveTo()</code> 即可，然后用<code>lineTo()</code>到B点,再调用系统自带的贝塞尔曲线方法<code>quadTo(ponitP.x,pointP.y)</code>计算即可，然后就是一样的<code>lineTo()</code>到D点，<code>quadTo(pointO.x,pointP.y)</code>;<br>关于<code>quadTo(x1,y1,x2,y2)</code>的使用，可以去百度一下，简单说一下，就是前面两个是控制点，后面两个是到达的点<br>这样<code>mBezierPath</code>基本就画好了，然后画起始圆和结束圆就可以了（当然，如果考虑到overdraw的话，起始可以用clipRect clipReject去掉重复的半圆，此处偷懒，直接画了两个圆，没有去掉重复绘制，或者直接画一个半圆，当然半圆的效果和圆是不一样的）<br>以下是构建出<code>mBezierPath</code>的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mBezierPath.reset();</div><div class="line">mBezierPath.moveTo(mStartA.getX(), mStartA.getY());</div><div class="line">mBezierPath.lineTo(mStartB.getX(), mStartB.getY());</div><div class="line">mBezierPath.quadTo(mControlPointP.getX(), mControlPointP.getY(), mEndC.getX(), mEndC.getY());</div><div class="line">mBezierPath.lineTo(mEndD.getX(), mEndD.getY());</div><div class="line">mBezierPath.quadTo(mControlPointO.getX(), mControlPointO.getY(), mStartA.getX(), mStartA.getY());</div></pre></td></tr></table></figure>
<h3 id="接下来就是计算控制点o-p"><a href="#接下来就是计算控制点o-p" class="headerlink" title="接下来就是计算控制点o,p"></a>接下来就是计算控制点o,p</h3><p>以图二简单的为例子，这种方式比较极端，计算比较容易，两个控制点p,o和H点重合，直接(R1(x,y)+R2(x,y))/2 = H(x,y)</p>
<p>图一也不麻烦，根据图一标注θ也可以算出o,p两点的x,y,具体实现可以看github代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 看到 QQ 拖动删除小红点的动画效果，就想着做个类似的效果，没找到Android 版的教程，于是就自己撸了一个，代码地址：&lt;a href=&quot;https://github.com/flyer88/JellyCircle/tree/master/circleindicator
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧]引用传递和值传递(pass by value vs pass by reference)</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%92%8C%E5%80%BC%E4%BC%A0%E9%80%92-pass-by-value-vs-pass-by-reference/"/>
    <id>http://dove.im/2016/11/19/旧-引用传递和值传递-pass-by-value-vs-pass-by-reference/</id>
    <published>2016-11-19T06:29:39.000Z</published>
    <updated>2016-11-19T06:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录这个的原因主要是今天看到了<a href="https://www.zhihu.com/question/31203609" target="_blank" rel="external">知乎的一个问题</a>，发现自己有些地方有点懵逼，写下来记录一下，<a href="http://zhihu.com/question/31203609/answer/50992895" target="_blank" rel="external">知乎上排名第一的答案</a>说的很清楚，不过看了以后依旧有点迷迷糊糊，所以自己写了个几行代码测试。<br>首先上一个，感觉比较对的结论：<br><strong>Horstmann的《java核心技术》（中文第8版P115-P117）原文描述：<br>”java程序设计语言总是采用值调用。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。“<br>”有些程序员（甚至是本书的作者），认为java程序设计语言对对象采用的是引用调用，实际上这种理解是不对的。”</strong><br>然后补充几句我的理解：</p>
<ol>
<li>首先，Java在传递过程中，传递的只有值，但是表现出来的形式，却既有值传递也有引用传递，因此，没必要纠结于名字，能理解原理即可。</li>
<li>在传递对象进函数时，对象的所有数据会被拷贝到局部变量中，这也就导致了局部变量修改其成员变量值时会导致原始的变量的成员变量值产生响应的改变，因为他们持有的成员变量的引用指向了同一个地址块(内存空间)。</li>
<li>而对于传递8种基本变量时，也只是拷贝了值，因此对基本变量其本身的修改，无法导致原始变量的的修改。</li>
<li>不过这里需要考虑特殊情况，就是String，其表现形式和8种基本变量一样，具体下文有分析，而对于String为何要这么做，我也不清楚，不是很懂 jvm 和 Java 的设计。</li>
</ol>
<hr>
<hr>
<h2 id="一-值类型和引用类型（此处先不考虑String）的传递："><a href="#一-值类型和引用类型（此处先不考虑String）的传递：" class="headerlink" title="一. 值类型和引用类型（此处先不考虑String）的传递："></a>一. 值类型和引用类型（此处先不考虑String）的传递：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Student student = <span class="keyword">new</span> Student();</div><div class="line">        student.age = <span class="number">10</span>;</div><div class="line">        System.out.println(student.age);<span class="comment">//10</span></div><div class="line">        addAge(student);</div><div class="line">        System.out.println(student.age);<span class="comment">//11</span></div><div class="line">        addAge(student.age);</div><div class="line">        System.out.println(student.age);<span class="comment">//11</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAge</span><span class="params">(Student paramStudent)</span></span>&#123;</div><div class="line">        paramStudent.age = <span class="number">11</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> paramAge)</span></span>&#123;</div><div class="line">        paramAge = <span class="number">12</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对以上代码进行解释</p>
<ul>
<li>首先<code>addAge(student)</code>调用的是<code>addAge(Student paramStudent)</code>，该部分其实很好理解，首先，<code>paramStudet</code>对象，拷贝了传入的<code>studet</code>对象所有的数据，因此<code>paramStudet</code>它所指向的地址，其实和<code>student</code>是一样的，所以，当<code>paramStudent</code>改变它的<code>age</code>值时，其触发的操作和<code>student</code>改变<code>age</code>的值是一样的 ,因为他们都指向了同一个地址块。</li>
<li>其次<code>addAge(student.age)</code>调用的是<code>addAge(int paramAge)</code>，也很好理解，<code>paramAge</code>也只是拷贝了<code>studet.age</code>的值，此处为10，然后改变了<code>paramAge</code>的值，但此时<code>paramAge</code>与引用类型不同，它保存的只有一个值，所以其实这个<code>parmaAge</code>作为一个局部变量，并不能对原本的<code>student.age</code>产生任何影响</li>
</ul>
<h2 id="二-String的问题："><a href="#二-String的问题：" class="headerlink" title="二. String的问题："></a>二. String的问题：</h2><h3 id="1-String问题来源"><a href="#1-String问题来源" class="headerlink" title="1. String问题来源"></a>1. String问题来源</h3><p>上面的例子其实很好搞清楚，但是我在碰到String的时候就有点懵逼了,如果调用以下方法，结果会如注释显示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    Student student = <span class="keyword">new</span> Student();</div><div class="line">    student.age = <span class="number">10</span>;</div><div class="line">    student.name = <span class="string">"dove"</span>;</div><div class="line">    changeName(student);</div><div class="line">    System.out.println(student.name);<span class="comment">//dove_2</span></div><div class="line">    changeName(student.name);</div><div class="line">    System.out.println(student.name);<span class="comment">//dove_2</span></div><div class="line">    changeName2(student.name); </div><div class="line">    System.out.println(student.name);<span class="comment">//dove_2         </span></div><div class="line">&#125;      </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">(Student paramStudent)</span></span>&#123;</div><div class="line">    paramStudent.name = <span class="string">"dove_2"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">(String paramName)</span></span>&#123;</div><div class="line">    paramName = <span class="string">"dove_3"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeName2</span><span class="params">(String paramName)</span></span>&#123;</div><div class="line">    paramName += <span class="string">"233"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>changeName2(String paramName)</code>此处讲道理被调用后应该是”dove_2233”,因为<code>String</code>是一个引用类型,也就是说此处的<code>parmaName</code>应该是指向和传入的参数指向了相同的一个地址块，然后对指向的内存进行了修改,然而结果并不是,原因就在于<code>String</code>是一个不可变的类型(为啥不可变呢,具体可以看<code>String</code>类的实现,它是一个<code>final class</code>,并且其内部正真保存着字符串的<code>value[]</code>也是不可变的(<code>final</code>)，所以意味着修改<code>Sting</code>是不可能的)。</p>
<h3 id="2-脑洞猜想可能情况"><a href="#2-脑洞猜想可能情况" class="headerlink" title="2.脑洞猜想可能情况"></a>2.脑洞猜想可能情况</h3><p>所以猜测上述的<code>changeName2</code>过程类似于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FuckString fuckString = <span class="keyword">new</span> FuckString();<span class="comment">//paramName</span></div><div class="line">FuckString fuckString2 = <span class="keyword">new</span> FuckString(fuckString);<span class="comment">//构造出的新的值</span></div><div class="line">fuckString = fuckString2;<span class="comment">//把paramName指向构造出的新值</span></div></pre></td></tr></table></figure>
<p>然后，这就有点想不通了，不可变的类型，String 的 <code>+</code> 是怎么弄的呢？打个断点试试看，强制进入，发现跳转到了StringBuilder的构造方法里，这说明应该是构造了一个新的StringBuilder对象。      </p>
<p><img src="~/19-58-14.jpg" alt=""></p>
<p>同时，底部的Debug里抛出了个错误，说是无法获取<code>StringBuilder.toString()</code>,也就进一步证明此处有新的<code>String</code>的产生。<br><img src="http://ob9rvakdw.bkt.clouddn.com/19-58-59.jpg" alt=""><br>到这里基本上就验证了我的猜想，<code>String</code> <code>+</code>会产生一个新的<code>String</code>对象，既然这样，反编译下，看下字节码，估计基本就搞定这个懵逼的问题了。</p>
<h3 id="3-字节码验证"><a href="#3-字节码验证" class="headerlink" title="3.字节码验证"></a>3.字节码验证</h3><p>于是就写了以下的类，用来验证：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        String s = <span class="string">"dove"</span>;</div><div class="line">        s += <span class="string">"233"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后javac，然后javap -c，看字节码,如下图。</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/20-03-38.png" alt=""><br>尝试着解释下该部分代码（不是很看的懂字节码，所以有些解释可能不是很规范，不过讲道理大概意思不会差很远)</p>
<ul>
<li><code>String s = &quot;dove&quot;;</code>部分字节码及解释</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0: ldc           #2                  // String dove</div><div class="line">2: astore_1</div></pre></td></tr></table></figure>
<p>第0行，将一个常量加载到操作数栈,也就是把“dove”这玩意，放进了操作数栈(也不知道是什么东西，蛤蛤)<br>第2行，将一号数值（下划线1代表一号，大概理解，不是很准确）从操作数栈存储到局部变量表，说白了就是把“dove”给存了起来？</p>
<ul>
<li><code>s += &quot;233&quot;;</code>部分字节码及解释</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> 3: new           #3                  // class java/lang/StringBuilder</div><div class="line"> 6: dup</div><div class="line"> 7: invokespecial #4                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">10: aload_1    </div><div class="line">11: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">14: ldc           #6                  // String 233</div><div class="line">16: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">19: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div></pre></td></tr></table></figure>
<p>第3行，这个很明显，不google也知道，<code>new StringBuilder()</code>，也就是搞了个<code>StringBUilder</code>的实例。<br>第6行，Java虚拟机提供了一些用于直接操作操作数栈，不是很懂，貌似对整体理解影响不大，先过。<br>第7行，invokespecial 调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法，此处应该是在初始化StringBuilder对象。<br>第10行，将1号局部变量(下划线1指代一号变量)加载到操作栈，这里应该是指“dove”<br>第11行，调用对象的实例方法,此处就是调用<code>StringBuilder.append</code>,也就是把“dove”加到了<code>StringBuilder</code>中<br>第14行，将一个常量加载到操作数栈，就是把“233”载入<br>第16行，调用对象的实例方法,此处就是调用<code>StringBuilder.append</code>，把“233”给加到“StringBuilder”中<br>第19行，调用对象的实例方法,此处就是调用<code>StringBuilder.toString</code>，而该方法，会触发<code>new String()</code>的操作，因此，会返还一个新的<code>String</code>对象</p>
<h3 id="4-最终结论："><a href="#4-最终结论：" class="headerlink" title="4.最终结论："></a>4.最终结论：</h3><p>从脑洞断点以及最后的字节码分析可以看出，<code>s +=&quot;233&quot;</code>,会导致一个新的String对象生成，也就是说，调用<code>changeName2(String paramName)</code>会使得<code>paramName</code>指向一个新的String对象，这样就意味着，对该数据的改变并不会影响本身<code>student.name</code>的值,由此，String懵逼的问题也解决了。</p>
<hr>
<hr>
<p>以上，就是整个关于Java引用传递和值传递的理解，有说的不对的，望指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录这个的原因主要是今天看到了&lt;a href=&quot;https://www.zhihu.com/question/31203609&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎的一个问题&lt;/a&gt;，发现自己有些地方有点懵逼，写下来记录一下，&lt;a href=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧]Android 代码混淆(二)</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-Android-%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86-%E4%BA%8C/"/>
    <id>http://dove.im/2016/11/19/旧-Android-代码混淆-二/</id>
    <published>2016-11-19T06:29:28.000Z</published>
    <updated>2016-11-19T07:15:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 代码混淆(一) 中已经记录并走了混淆的整个流程，用命令行进行混淆的操作，并验证了三个过程，这篇文章会记录一下在 <code>Android Studio</code> 下混淆的操作，以及具体需要的注意的一些事项。</p>
<h4 id="基本操作及整体的流程"><a href="#基本操作及整体的流程" class="headerlink" title="基本操作及整体的流程"></a>基本操作及整体的流程</h4><p>1.修改<code>build.gradle</code>脚本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="literal">true</span><span class="comment">//开启混淆</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//配置内容</span></div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled <span class="literal">true</span><span class="comment">//开启混淆</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//配置内容</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.修改proguard-rules.pro文件，写入基础的几个混淆规则，避开<code>Android</code>自带的一些类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"># 四大组件及基本类</div><div class="line">-keep public class * extends android.app.Activity</div><div class="line">-keep public class * extends android.app.Application</div><div class="line">-keep public class * extends android.app.Service</div><div class="line">-keep public class * extends android.content.BroadcastReceiver</div><div class="line">-keep public class * extends android.content.ContentProvider</div><div class="line">-keep public class * extends android.app.backup.BackupAgentHelper</div><div class="line">-keep public class * extends android.preference.Preference</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line">-keep public class * extends android.app.Fragment</div><div class="line">-keep public class * extends android.support.v4.**</div><div class="line">-keep public class * extends android.support.annotation.**</div><div class="line">-keep public class * extends android.support.v7.**</div><div class="line">-keep public class android.app.Notification</div><div class="line">-keep public class android.webkit.**</div><div class="line">#保护WebView对HTML页面的API不被混淆</div><div class="line">-keep class **.Webview2JsInterface &#123;*; &#125;</div><div class="line">-keep public class * extends android.app.Dialog</div><div class="line">-keep public class * extends android.view</div><div class="line"></div><div class="line"># 所有枚举类型不要混淆</div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">public static **[] values();</div><div class="line">public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 保持 native 方法不被混淆</div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#保持R文件不被混淆，否则，你的反射是获取不到资源id的</div><div class="line">-keep class **.R*&#123;*;&#125;</div><div class="line"></div><div class="line"># parcelable 不被混淆</div><div class="line">-keep class * implements android.os.Parcelable &#123;</div><div class="line">public static finalandroid.os.ParcelableCreator *;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#保持实现"Serializable"接口的类不被混淆</div><div class="line">-keepnames class * implements java.io.Serializable</div><div class="line"></div><div class="line">#保护实现接口Serializable的类中，指定规则的类成员不被混淆</div><div class="line">-keepclassmembers class * implements java.io.Serializable &#123;</div><div class="line">static final long serialVersionUID;</div><div class="line">private static final java.io.ObjectStreamField[] serialPersistentFields;</div><div class="line">!static !transient &lt;fields&gt;;</div><div class="line">!private &lt;methods&gt;;</div><div class="line">!private &lt;methods&gt;;</div><div class="line">private void writeObject(java.io.ObjectOutputStream);</div><div class="line">private void readObject(java.io.ObjectInputStream);</div><div class="line">java.lang.Object writeReplace();</div><div class="line">java.lang.Object readResolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.直接跑一个debug版的进行测试，把打包好的APK修改成.zip文件，解压，取出文件中dex包。</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/11-30-16.jpg" alt=""><br>把解压获取的<code>dex</code>文件，通过 <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar工具</a> (一个把<code>dex</code>包转换成<code>jar</code>包的工具)，把<code>dex</code>转换成<code>jar</code>包。其具体使用不在此详细讲。<br>下图中我没有把d2j-dex2jar配置进环境变量，所以进入对应目录跑的脚本。<br><img src="http://ob9rvakdw.bkt.clouddn.com/11-35-36.jpg" alt=""></p>
<p>运行完后可以看到，当前目录下多了一个<code>classes-dex2jar.jar</code>的文件</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/11-37-26.jpg" alt=""></p>
<p>接下来就是和前一篇文章一样，直接用<code>Intelij</code>导入，看class文件，包内类名字已有变化，部分类已被移除，同时部分类也被改成final类型。具体就不上图了。主要看下面的注意事项。</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>上述流程在如果是项目一开始就进行混淆，大部分情况下是能够成功混淆，并且不会出现很大问题，只需要在项目进行过程中注意，新加的第三方类库，反射代码。但是，如果你面对的是一个沉积已久，并且项目庞大，而又从未写过混淆的项目，那你可能会在混淆开启时，面临几千个混淆时的<code>warning</code>和<code>note</code>，最终无法编译通过。这中间主要是大量第三方库的报错。下面记录一下我在处理这种情况时，遇到的问题以及解决方案</p>
<h5 id="warning-处理"><a href="#warning-处理" class="headerlink" title="warning 处理"></a>warning 处理</h5><p>写了个<a href="https://github.com/flyer88/Some_Python_For_Android" target="_blank" rel="external">脚本</a>,，过滤出大部分错误，生成proguard文件，然后继续处理剩下的个别遗留问题</p>
<p>写几个典型的例子：</p>
<p>1.情况一:  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Note: xxxxxx calls 'Class.getEnclosingMethod'</div><div class="line">#这种情况就是调用了反射，找到xxxxx对应调用的类，并且设为入口点</div></pre></td></tr></table></figure>
<p>2.情况二:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Warning: AAAAAAA: can't find superclass or interface BBBBBBB</div><div class="line">Warning: AAAAAAA: can't find referenced class BBBBBBB </div><div class="line">#这两种种情况就是找不到BBBBBB了，直接把BBBBB设为入口点，同时给AAAAA打上-dontwarn既可以,如下</div><div class="line">-keep class BBBBBB</div><div class="line">-dontwarn AAAAAA</div></pre></td></tr></table></figure>
<p>3.情况三:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Note:AAAAA accesses a declared field BBBBB dynamically </div><div class="line">    Maybe this is program field 'CCCCC'</div><div class="line">    Maybe .....</div><div class="line">#这种情况下，需要处理CCCC,把它设为入口点，同样设置对AAAAA设置-dontwarn</div><div class="line">-keep class CCCCC</div><div class="line">#不一定是-keep，也有可能其他的，例如 -keepattribute 更为合适</div><div class="line">-dontwarn AAAAA</div></pre></td></tr></table></figure>
<h5 id="多个-module-的混淆"><a href="#多个-module-的混淆" class="headerlink" title="多个 module 的混淆"></a>多个 module 的混淆</h5><p>有时候会碰到多个<code>module</code>混淆的情况,多数情况下，为了清晰处理会给每个<code>module</code>都写上对应的混淆规则，同时需要修改<code>build.gradle</code>的配置，而不是之前的写法，具体可以参考<a href="http://stackoverflow.com/questions/30820915/android-studio-proguard-handling-in-multi-library-projects" target="_blank" rel="external">so上的解释</a><br>这种方案，需要<code>module</code>之间的依赖清晰，最底层的<code>module</code>会被最先混淆，然后一步一步倒推上去，知道主<code>module</code>,多为<code>app module</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        consumerProguardFiles <span class="string">'proguard-project.txt'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而，我碰到的情况则是，多个<code>module</code>中有相同的包名，这时候视图去每个<code>module</code>自顾自混淆的情况下是不可能。因为同包名的情况下，混淆器是无法一个一个<code>module</code>的进行混淆。</p>
<p>所以最终的解决方案是，面对这种项目，还是在主<code>module</code>中进行混淆吧。</p>
<h5 id="反射的处理"><a href="#反射的处理" class="headerlink" title="反射的处理"></a>反射的处理</h5><p>反射举个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; a = Class.forName(<span class="string">"com.dove.xu.a"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">dove</span>.<span class="title">xu</span>.<span class="title">a</span></span>&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>不过，此处在考虑到自己代码的同时，需要注意第三方类库。类似的<code>json</code>处理库，<code>retrofit</code>等都是有反射代码的。</p>
<h5 id="JavaScript-的处理"><a href="#JavaScript-的处理" class="headerlink" title="JavaScript 的处理"></a>JavaScript 的处理</h5><p>处理方案和上面的反射类似<br>keep 掉需要调用 java 代码方法，或者类即可<br>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">WebInterface</span></span>&#123;</div><div class="line">    WebInterface()&#123;</div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callBackAndroid</span><span class="params">()</span></span>&#123;</div><div class="line">        Toast.make....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>混淆规则只需要加上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">dove</span>.<span class="title">xu</span>.<span class="title">WebInterface</span></span>&#123;*;&#125;</div></pre></td></tr></table></figure>
<h5 id="常用系统和第三方库的混淆规则"><a href="#常用系统和第三方库的混淆规则" class="headerlink" title="常用系统和第三方库的混淆规则"></a>常用系统和第三方库的混淆规则</h5><p>下面这个github库收藏了大量第三方库的混淆规则，可以去看一下<br><a href="https://github.com/krschultz/android-proguard-snippets" target="_blank" rel="external">snippets</a><br>基本的系统混淆规则，在一开始则整体流程中也已记录，就不重复了。<br>最后，需要注意的是网上也会有大量现成的第三方类库的混淆规则。但是在抄的时候也需要注意，不同的版本混淆规则不一定相同，所以一定要注意，在拷贝完以后，看一下规则，是否符合自己的版本，包名是否正确。<br>举个自己碰到的例子：<br><a href="https://github.com/JakeWharton/butterknife/blob/master/butterknife/proguard-rules.txt" target="_blank" rel="external">Butterknife 8.2.1 混淆规则,摘自官方github</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Retain generated class which implement ViewBinder.</div><div class="line">-keep public class * implements butterknife.internal.ViewBinder &#123; public &lt;init&gt;(); &#125;</div><div class="line"></div><div class="line"># Prevent obfuscation of types which use ButterKnife annotations since the simple name</div><div class="line"># is used to reflectively look up the generated ViewBinder.</div><div class="line">-keep class butterknife.*</div><div class="line">-keepclasseswithmembernames class * &#123; @butterknife.* &lt;methods&gt;; &#125;</div><div class="line">-keepclasseswithmembernames class * &#123; @butterknife.* &lt;fields&gt;; &#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/chalup/proguard-please-repo/blob/master/com.jakewharton/butterknife/5.1.2/proguard.cfg" target="_blank" rel="external">Butterknife 5.1.2 混淆规则，摘自官方github</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-dontwarn butterknife.internal.**</div><div class="line">-keep <span class="class"><span class="keyword">class</span> **$$<span class="title">ViewInjector</span> </span>&#123; *; &#125;</div><div class="line">-keepnames <span class="class"><span class="keyword">class</span> * </span>&#123; <span class="meta">@butterknife</span>.InjectView *;&#125;</div></pre></td></tr></table></figure>
<p>注:此处因学长提到<code>@</code>的问题，后来查看官方文档，如下:</p>
<p>The @ specifications can be used to restrict classes and class members to the ones that are annotated with the specified annotation types. An annotationtype is specified just like a classname.</p>
<p>上面大概的意思就是说，@符号可以用来标记注解类，用法和一般类一样<br>即，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keepnames <span class="class"><span class="keyword">class</span> * </span>&#123; <span class="meta">@butterknife</span>.InjectView *;&#125;</div></pre></td></tr></table></figure>
<p>此处的意思是，避开所有类中，有<code>butterknife.InjectView</code>注解的任何变量，方法等，其中<code>butterknife</code>是指包名，即<code>InjectView</code>的完整引用，参考下图：</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/21-24-45.jpg" alt=""></p>
<h5 id="keep-注解来避开混淆"><a href="#keep-注解来避开混淆" class="headerlink" title="@keep 注解来避开混淆"></a>@keep 注解来避开混淆</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//防止混淆类</span></div><div class="line"><span class="meta">@Keep</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//防止混淆变量</span></div><div class="line"><span class="meta">@Keep</span></div><div class="line"><span class="keyword">public</span> String name;</div><div class="line"></div><div class="line"><span class="comment">//防止混淆方法</span></div><div class="line"><span class="meta">@Keep</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>需要手动开启注解避开混淆</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#http://tools.android.com/tech-docs/support-    annotations</div><div class="line">-dontskipnonpubliclibraryclassmembers</div><div class="line">-printconfiguration</div><div class="line">-keep,allowobfuscation @interface         android.support.annotation.Keep</div><div class="line"></div><div class="line">-keep @android.support.annotation.Keep class *</div><div class="line">-keepclassmembers class * &#123;</div><div class="line">    @android.support.annotation.Keep *;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>以上就是我在Android混淆时，学到的知识以及碰到的问题。特此记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 代码混淆(一) 中已经记录并走了混淆的整个流程，用命令行进行混淆的操作，并验证了三个过程，这篇文章会记录一下在 &lt;code&gt;Android Studio&lt;/code&gt; 下混淆的操作，以及具体需要的注意的一些事项。&lt;/p&gt;
&lt;h4 id=&quot;基本操作及整体的流程
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[旧]Android 代码混淆(一)</title>
    <link href="http://dove.im/2016/11/19/%E6%97%A7-Android-%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86-%E4%B8%80/"/>
    <id>http://dove.im/2016/11/19/旧-Android-代码混淆-一/</id>
    <published>2016-11-19T06:29:03.000Z</published>
    <updated>2016-11-19T07:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文前半部分对照 <a href="http://proguard.sourceforge.net" target="_blank" rel="external">Proguard 文档 (Manul 中的 Introduce 部分)</a>进行翻译同时加上个人的理解，如果有与原文不同，请以原文为主。后半部分是对几个步骤的验证。</p>
<hr>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>混淆器(ProGuard)会对 Java class 文件进行 shrinker(压缩)，optimizer(优化)，obfuscator(混淆)以及preverifier(校验)。shrinker(压缩)这一步会找到并移除没用到的类，变量，方法，属性。optimization(优化)这一步，会分析并且优化方法的字节码。obfuscation(混淆)则会对 class，fields，methods替换成一些短的无意义的名字。第一步会把代码量变小，运行更加有效率，同时更加难以被逆向。在 Java Micro Edition 和 Java 6或者更高版本中，最后一步的检验过程，会向class文件中添加一些预校验的信息。<br>上述的每个步骤，都是可以选择的(可以进行也可以不进行)。例如，ProGuard 可以只进行preverify，从而更高效的运行。</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/21-59-04.jpg" alt=""></p>
<ul>
<li>首先，ProGuard(混淆器) 读入输入的 jars (也可以是 aars, wars, ears, zips, apks, 或者目录)。随后，开始进行 shrinker(压缩)，optimizer(优化)，obfuscator(混淆)以及preverifier(校验)。你可以选择性的让ProGuard(混淆器)进行多种类型的优化操作。ProGuard(混淆器)会把修改过的结果写入一个或者多个输出的 jars (也可以是 aars, wars, ears, zips, apks, 或者目录)中。</li>
<li>混淆器需要明确输入文件(Input jars)是jars包(也可以是 aars, wars, ears, zips, apks, 或者目录)。这些 libraries 本质上是你将会用来编译的代码。混淆器为了能够正确进行整个过程，会重新构建类之间的依赖。而依赖包(Library jars) 往往是不会被改变的，但你依旧需要把它们放在最终的App的环境中。</li>
</ul>
<h4 id="Entry-points-入口点"><a href="#Entry-points-入口点" class="headerlink" title="Entry points(入口点)"></a>Entry points(入口点)</h4><ul>
<li>在压缩步骤(shrinker)，混淆器会从这些点(入口点)进入，并且递归寻找决定哪些类和哪些类成员会被使用。所有的其他类和类成员都会被抛弃掉</li>
<li>在优化步骤(optimizer)，混淆器会进一步优化代码。在这些优化过程中，那些不是入口点的类和方法会变成private static或者final，不被用到的参数会被移除，一些方法会变成内敛方法</li>
<li>在混淆这一步(obfuscator)，混淆器会重新命名那些不是入口点的类和类的成员。在这整个过程中，那些成为入口点的地方，依旧会为他们保留原来的名字</li>
<li>预验证阶段(preverifier)是唯一一个不需要知道入口点的阶段</li>
</ul>
<h4 id="反射-该部分内容具体处理和理解，会在下一文章中进行具体的记录"><a href="#反射-该部分内容具体处理和理解，会在下一文章中进行具体的记录" class="headerlink" title="反射(该部分内容具体处理和理解，会在下一文章中进行具体的记录)"></a>反射(该部分内容具体处理和理解，会在下一文章中进行具体的记录)</h4><ul>
<li>对于反射和introspection 进行代码的自动处理时，都会存在一些特殊的问题。在混淆器进行处理时，代码中类和类成员都是被动态创建或者被动态调用的(通过对应类的名字，或者成员名字)，这些地方都必须被定义成入口点。例如，<code>Class.forName()</code>这个构造器会在运行时指向任何的类。又比如，类的名字可能会从配置文件中读入，这通常很难去计算出是那些类需要被保留(通过原始的名字)。因此，你必须得在混淆器的配置中，通过简单相同的操作<code>-keep</code>来指定他们。<br>然而，混淆器已经能够帮你发现并处理以下的情况：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Class.forName(<span class="string">"SomeClass"</span>)</div><div class="line">SomeClass.class</div><div class="line">SomeClass.class.getField(<span class="string">"someField"</span>)</div><div class="line">SomeClass.class.getDeclaredField(<span class="string">"someField"</span>)</div><div class="line">SomeClass.class.getMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123;&#125;)</div><div class="line">SomeClass.class.getMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123; A.class &#125;)</div><div class="line">SomeClass.class.getMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123; A.class, B.class &#125;)</div><div class="line">SomeClass.class.getDeclaredMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123;&#125;)</div><div class="line">SomeClass.class.getDeclaredMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123; A.class &#125;)</div><div class="line">SomeClass.class.getDeclaredMethod(<span class="string">"someMethod"</span>, <span class="keyword">new</span> Class[] &#123; A.class, B.class &#125;)</div><div class="line">AtomicIntegerFieldUpdater.newUpdater(SomeClass.class, <span class="string">"someField"</span>)</div><div class="line">AtomicLongFieldUpdater.newUpdater(SomeClass.class, <span class="string">"someField"</span>)</div><div class="line">AtomicReferenceFieldUpdater.newUpdater(SomeClass.class, SomeType.class, <span class="string">"someField"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>类和类成员的名字会不一样，但是构造方法必然是相同的，由此，混淆器能够认出他们。被引用的类和类的成员在压缩(shrinking)阶段会被保留，同时，string 类型的参数也会在混淆时(obfuscation)被准确的修改。</li>
<li>除此之外，混淆器会提供一些建议：是否保留一些出现的类和类成员。举例，混淆器会标记<code>(SomeClass)Class.forName(variable).newInstance()</code>这样的构造器。因为这些方法可能会指向其他类，这些可能是类，也可能是接口，或者是继承自这些接口或者类的类。你需要在配置中做相应的处理。</li>
<li>为了能够得到正确的混淆结果，你应该对进行混淆的代码多少有所熟悉。当面临大量反射代码时，混淆代码需要进行大量的试验，并处理错误，特别是对于内部代码没有足够的信息的情况下    </li>
</ul>
<hr>
<p>以上是对<a href="http://proguard.sourceforge.net" target="_blank" rel="external">官方文档首页</a>的翻译内容</p>
<h2 id="具体的验证"><a href="#具体的验证" class="headerlink" title="具体的验证"></a>具体的验证</h2><p>该部分不是翻译内容，是根据<a href="http://proguard.sourceforge.net/manual/usage.html" target="_blank" rel="external">ProGuard 的使用方法</a>和<a href="http://proguard.sourceforge.net" target="_blank" rel="external">文档首页</a>，对上述三个步骤的具体验证。<br>由于大部分情况下，<code>Android</code>的混淆只需要考虑<code>Obfuse</code>这个步骤，因为很多第三方依赖包的混淆规则会把 <code>shrink</code>和<code>optimize</code>去掉（比如友盟）。所以先验证这一步。<br>下面的验证步骤，涉及三个类，java打包的命令(Java 环境)，<code>proguard.ja</code>r包(混淆器，进行整个混淆过程的jar包)，<code>proguard.pro</code>文件(写入具体混淆的规则)和<code>Intelij</code>(用来查看<code>class</code>文件)等内容。</p>
<h4 id="Obfuse-步骤验证"><a href="#Obfuse-步骤验证" class="headerlink" title="Obfuse 步骤验证"></a>Obfuse 步骤验证</h4><p>这个步骤，如上所说，主要是对类，方法进行名字的修改，也是 Android 混淆中最重要的部分。为了验证这个过程，我做了下面的demo操作</p>
<ul>
<li>首先写了3个类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dove.home;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dove.home;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloWorld2</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello World2"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dove.home;    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后编译,打包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">javac com/dove/home/Main.java</div><div class="line">javac com/dove/home/HelloWorld2.java</div><div class="line">javac com/dove/home/HelloWorld.java</div><div class="line">//注意在进行下面步骤的时候，我把 com/dove/home 下的 java源码删了</div><div class="line">jar -cvf main_source.jar com</div></pre></td></tr></table></figure>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/18-39-05.jpg" alt=""></p>
<ul>
<li>然后使用混淆器，混淆器其具体使用方法，主要是调用<code>proguard.jar</code>包，然后配置 <code>proguard.pro</code>文件进行具体的参数设置。</li>
</ul>
<p>下面是我<code>proguard.pro</code>文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 源码文件</div><div class="line">-injars main_source.jar</div><div class="line"># 混淆后输出文件</div><div class="line">-outjars main_source_out.jar</div><div class="line"># java 核心 jar 不能混淆</div><div class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/jce.jar</div><div class="line"># 全部不混淆，即三个class文件都会保持原样</div><div class="line">-keep class com.dove.home.Main&#123;*;&#125;</div><div class="line">-keep class com.dove.home.HelloWorld&#123;*;&#125;</div><div class="line">-keep class com.dove.home.HelloWorld2&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>具体的混淆命令，同时参考下图(该步骤会生成混淆后的jar包)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar proguard.jar @proguard.pro</div></pre></td></tr></table></figure>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/17-45-40.jpg" alt=""></p>
<p>注意：然后修改 proguard.pro 文件，内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-injars main_source.jar</div><div class="line"># 注意输出包的名字改了</div><div class="line">-outjars main_source_proguard_out.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/jce.jar</div><div class="line">-keep class com.dove.home.Main&#123;*;&#125;</div><div class="line"># 删除了HelloWorld的 keep</div><div class="line">-keep class com.dove.home.HelloWorld2&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>同样运行上面的混淆命令，生成另一个混淆后的包</p>
<p>最后对三个包进行对比，通过代码逆向，进行验证，最快的方式是把生成的 jar 包，当做第三方依赖包直接导入Intellij 中(有decode的功能)，如下图，三个包的区别</p>
<p><img src="http://ob9rvakdw.bkt.clouddn.com/18-48-53.jpg" alt=""></p>
<p>最初是的源码包和保留<code>HelloWorld</code>,<code>HelloWorld2</code>以及<code>Main</code>入口点的包是一样的，不同的是最后没有保留<code>HelloWorld</code>入口点的包，它的<code>HelloWorld</code>变成了<code>a</code>，而<code>Main</code>和<code>HelloWorld2</code>都正常没有被修改</p>
<h4 id="Optimize-步骤验证"><a href="#Optimize-步骤验证" class="headerlink" title="Optimize 步骤验证"></a>Optimize 步骤验证</h4><p>同样，修改 proguard.pro 文件，内容如下，然后运行混淆命令，生成新的 jar 包</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-injars main_source.jar</div><div class="line"># 输出包名改了，方便对比</div><div class="line">-outjars main_source_proguard_not_optimize_out.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/jce.jar</div><div class="line"># 加上不进行优化的限制</div><div class="line">-dontoptimize</div><div class="line">-keep class com.dove.home.Main&#123;*;&#125;</div><div class="line">-keep class com.dove.home.HelloWorld2&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>同上，导入IntelliJ，对比上一步中混淆后的 jar 包，发现名字没啥变化，但内容不一样了<br><img src="http://ob9rvakdw.bkt.clouddn.com/18-51-28.jpg" alt=""><br>首先是没有添加 <code>-dontoptimize</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dove.home;</div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是添加了 <code>-dontoptimize</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dove.home;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上述译文中所说，optimize 会进行代码优化，不是入口点的代码，会变成<code>final</code>，<code>private</code>等等，该步骤验证完毕。</p>
<h4 id="Shrink-步骤验证"><a href="#Shrink-步骤验证" class="headerlink" title="Shrink 步骤验证"></a>Shrink 步骤验证</h4><p>修改 proguard.pro 文件，进行压缩，同时不对 HelloWorld，HelloWorld2进行入口点的保留</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-injars main_source.jar</div><div class="line">-outjars main_source_proguard_shrink_out.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/jce.jar</div><div class="line"></div><div class="line">-keep class com.dove.home.Main&#123;*;&#125;</div><div class="line"># 注意对比之前，删除了HelloWorld和HelloWorld2的 keep</div></pre></td></tr></table></figure>
<p>修改 proguard.pro 文件，不进行压缩，同样不对 HelloWorld，HelloWorld2进行入口点的保留</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-injars main_source.jar</div><div class="line">-outjars main_source_proguard_not_shrink_out.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</div><div class="line">-libraryjars &lt;java.home&gt;/lib/jce.jar</div><div class="line"># 添加不进行压缩</div><div class="line">-dontshrink</div><div class="line">-keep class com.dove.home.Main&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>其结果对比<br>添加了 <code>-dontshrink</code>标志<br><img src="http://ob9rvakdw.bkt.clouddn.com/18-58-04.jpg" alt=""><br>未添加 <code>-dontshrink</code>标志<br><img src="http://ob9rvakdw.bkt.clouddn.com/18-58-16.jpg" alt=""><br>此处消失的<code>b</code>其实就是<code>HelloWorld2</code>，而留下的<code>a</code>则是<code>HelloWorld</code>,原因很简单，因为Main里面持有了<code>HelloWorld</code>的引用，而<code>HelloWorld2</code>则从未被用到，所以就被抛弃了。<br>由此验证，shrink阶段，Proguard(混淆器)会把无用类文件等删除，一些被动态获取的类就需要注意了，需要进行<code>-keep</code>操作，使其成为入口点。</p>
<hr>
<p>以上就是对混淆整个过程的验证</p>
<p>对于 Android 混淆，一些需要注意的东西，会在下一篇文章中记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文前半部分对照 &lt;a href=&quot;http://proguard.sourceforge.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proguard 文档 (Manul 中的 Introduce 部分)&lt;/a&gt;进行翻译同时加上个人的理解，如果
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dagger2 学习(二)</title>
    <link href="http://dove.im/2016/11/18/dagger2-%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://dove.im/2016/11/18/dagger2-学习-二/</id>
    <published>2016-11-18T08:27:46.000Z</published>
    <updated>2017-01-15T12:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前记录了最简单的<code>Dagger 2</code>  使用，现在记录一下面对多层依赖时的问题，同时配合 <code>@Module</code> 进行注入的情况。</p>
<h3 id="A-多层依赖情况"><a href="#A-多层依赖情况" class="headerlink" title="A 多层依赖情况"></a>A 多层依赖情况</h3><p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A02" target="_blank" rel="external">该部分代码A</a></p>
<h4 id="1-多层依赖情况模拟"><a href="#1-多层依赖情况模拟" class="headerlink" title="1. 多层依赖情况模拟"></a>1. 多层依赖情况模拟</h4><p>添加 <code>ClassRoom</code> 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</div><div class="line">、、</div><div class="line">    User mUser;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassRoom</span><span class="params">(User user)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mUser = user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mUser;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        mUser = user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>MainActivity.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//@Inject User mUser;// 注释掉这行</span></div><div class="line"><span class="meta">@Inject</span> ClassRoom mClassRoom;<span class="comment">// 添加这行注入</span></div><div class="line">...</div><div class="line">mUserAgeTv.setText(<span class="string">""</span> + mClassRoom.getUser().getAge());</div><div class="line"><span class="comment">// 修改获取方式，测试注入是否成功</span></div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="2-生成代码对比"><a href="#2-生成代码对比" class="headerlink" title="2. 生成代码对比"></a>2. 生成代码对比</h4><p><code>ClassRoom.java</code> =&gt; <code>ClassRoom_Factory.java</code> </p>
<p>编译，查看生成代码，多出一个 <code>ClassRoom_Factory</code>  ，效果和对 <code>User</code>  构造方法的注入是一样的。</p>
<p>重点关注 <code>DaggerUserComponent</code> 和 <code>MainActivity_MemberInjector</code> 的变化</p>
<h5 id="1-DaggerUserComponent-java-变化不大，主要是多了一个-Provider以及对应的初始化"><a href="#1-DaggerUserComponent-java-变化不大，主要是多了一个-Provider以及对应的初始化" class="headerlink" title="(1) DaggerUserComponent.java 变化不大，主要是多了一个 Provider以及对应的初始化"></a>(1) <code>DaggerUserComponent.java</code> 变化不大，主要是多了一个 Provider以及对应的初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Provider&lt;ClassRoom&gt; classRoomProvider;<span class="comment">// 多出一个 clssRoomProvider</span></div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</div><div class="line">  <span class="comment">// 初始化方法变化，需要先初始化 classRoomProvider，然后再创建 mainActivityMembersInjector</span></div><div class="line">  	<span class="keyword">this</span>.classRoomProvider = ClassRoom_Factory.create(User_Factory.create());</div><div class="line">   	<span class="keyword">this</span>.mainActivityMembersInjector = MainActivity_MembersInjector.create(classRoomProvider);</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<blockquote>
<p>注意： 此处对<code>classRoomProvider</code>初始化 需要调用到他所依赖的 <code>User</code> 所生成的<code>User_Factory</code></p>
<p>这里也是处理依赖的地方，当 <code>ClassRoom</code> 生成需要 <code>User</code> 时，需要先提供 <code>User</code> 的生成者，也就是 <code>User_Factory</code></p>
</blockquote>
<h5 id="2-MainActivity-MemberInjector-java，变化也不大"><a href="#2-MainActivity-MemberInjector-java，变化也不大" class="headerlink" title="(2) MainActivity_MemberInjector.java，变化也不大"></a>(2) <code>MainActivity_MemberInjector.java</code>，变化也不大</h5><p>因为去掉了 <code>@Inject User mUser;</code> 这行，因此 <code>Provider&lt;User&gt; mUserProvider</code> 也就消失了。</p>
<p>其余部分，主要是从 <code>User</code> 转换到 <code>ClassRoom</code> 。具体可以参考下面代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;ClassRoom&gt; mClassRoomProvider;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_MembersInjector</span><span class="params">(Provider&lt;ClassRoom&gt; mClassRoomProvider)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> mClassRoomProvider != <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">this</span>.mClassRoomProvider = mClassRoomProvider;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MainActivity&gt; <span class="title">create</span><span class="params">(Provider&lt;ClassRoom&gt; mClassRoomProvider)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainActivity_MembersInjector(mClassRoomProvider);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">    &#125;</div><div class="line">    instance.mClassRoom = mClassRoomProvider.get();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectMClassRoom</span><span class="params">(</span></span></div><div class="line">      MainActivity instance, Provider&lt;ClassRoom&gt; mClassRoomProvider) &#123;</div><div class="line">    instance.mClassRoom = mClassRoomProvider.get();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-总结"><a href="#3-总结" class="headerlink" title="(3) 总结"></a>(3) 总结</h5><p>所以综上，当需要注入的对象，依赖另一个对象时，<code>Dagger 2</code> 编译 生成的代码，和原本的方法区别不是很大</p>
<p>最大变化主要是初始化 <code>DaggerUserComponent</code> 时候，多了对 <code>classRoomProvider</code> 的初始化赋值。</p>
<p>即 <code>A</code> 依赖 <code>B</code>  时，<code>Dagger</code>  在生成 <code>Component</code> 实例的时候，会调用 <code>B</code> 的<code>B_Factory</code>来生成 <code>mAProvider</code> </p>
<p>然后才能对 <code>mainActiivtyMembersInjector</code> 进行初始化</p>
<h3 id="B-配合-Module-解决多层依赖"><a href="#B-配合-Module-解决多层依赖" class="headerlink" title="B 配合@Module 解决多层依赖"></a>B 配合<code>@Module</code> 解决多层依赖</h3><p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A02.1Module" target="_blank" rel="external">该部分代码B</a></p>
<h4 id="1-总述"><a href="#1-总述" class="headerlink" title="1. 总述"></a>1. 总述</h4><p><code>@Module</code> 作用，某个模块依赖的提供者，<code>@Provides</code> 配合使用，其主要是下面两种情况：</p>
<ol>
<li>需要的依赖并没有存在实例，需要 <code>new</code> 出来</li>
<li>需要的依赖来自已经创建的或者已存在的对象</li>
</ol>
<h4 id="2-具体使用模拟"><a href="#2-具体使用模拟" class="headerlink" title="2.具体使用模拟"></a>2.具体使用模拟</h4><p>此处先考虑实例 需要 <code>new</code> 出来这种情况。</p>
<p>添加 <code>Subject.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    String mName;</div><div class="line">    String mId;</div><div class="line">    ClassRoom mClassRoom;</div><div class="line">    User mUser;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subject</span><span class="params">(ClassRoom classRoom)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mName = <span class="string">""</span>;</div><div class="line">        <span class="keyword">this</span>.mId = <span class="string">""</span>;</div><div class="line">        <span class="keyword">this</span>.mClassRoom = classRoom;</div><div class="line">        <span class="keyword">this</span>.mUser = classRoom.getUser();</div><div class="line">    &#125;	</div><div class="line">  	...</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加<code>SubjectModule.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectModule</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectModule</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span> <span class="function">Subject <span class="title">provideSubject</span><span class="params">(ClassRoom classRoom)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Subject(classRoom);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改<code>UserComponent.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = SubjectModule.class)<span class="comment">// 修改加入 modules 依赖</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>修改 <code>MainActivity.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    @Inject User mUser;</span></div><div class="line"><span class="comment">//    @Inject ClassRoom mClassRoom;</span></div><div class="line"><span class="comment">// 注释掉上面两行，添加 mSubject 的注入</span></div><div class="line">    <span class="meta">@Inject</span> Subject mSubject;</div><div class="line">    SubjectModule mSubjectModule;</div><div class="line">	...</div><div class="line">    ...</div><div class="line">    mSubjectModule = <span class="keyword">new</span> SubjectModule();</div><div class="line"><span class="comment">// 注意此处调用方式已经变了，需要外部自己传入标记的 xxModule 类</span></div><div class="line">	DaggerUserComponent.builder()</div><div class="line">	  .subjectModule(mSubjectModule)</div><div class="line">	  .build().injectTo(<span class="keyword">this</span>);</div><div class="line">	mUserAgeTv.setText(<span class="string">""</span> + mSubject.mClassRoom.getUser().getAge());</div></pre></td></tr></table></figure>
<h4 id="3-查看该部分内容对应生成的代码"><a href="#3-查看该部分内容对应生成的代码" class="headerlink" title="3. 查看该部分内容对应生成的代码"></a>3. 查看该部分内容对应生成的代码</h4><p>加入的修改的类有些多，所以再看一次其生成代码的对应关系</p>
<h5 id="1-SubjectModule-java-gt-SubjectModule-ProvideSubjectFactory-java"><a href="#1-SubjectModule-java-gt-SubjectModule-ProvideSubjectFactory-java" class="headerlink" title="(1) SubjectModule.java =&gt; SubjectModule_ProvideSubjectFactory.java"></a>(1) <code>SubjectModule.java</code> =&gt; <code>SubjectModule_ProvideSubjectFactory.java</code></h5><p><code>@Provides Subject provideSubject(ClassRoom classRoom)</code> 该注解，确定了 生成的 <code>xxx_ProvidexxxFactory</code> 需要用到的依赖，此处是<code>ClassRoom</code> 类，对应的是 <code>ClassRoom_Factory</code> ，下面具体的代码中也可看出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectModule_ProvideSubjectFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Subject</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SubjectModule <span class="keyword">module</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;ClassRoom&gt; classRoomProvider;<span class="comment">// @provides 标记的函数所需要的依赖</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubjectModule_ProvideSubjectFactory</span><span class="params">(</span></span></div><div class="line">      SubjectModule <span class="keyword">module</span>, Provider&lt;ClassRoom&gt; classRoomProvider) &#123;</div><div class="line">    <span class="keyword">assert</span> <span class="keyword">module</span> != <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</div><div class="line">    <span class="keyword">assert</span> classRoomProvider != <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">this</span>.classRoomProvider = classRoomProvider;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Subject <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// get方法不一样，不是直接 new ，而是调用 SubjectModule.provideSubject() 方法</span></div><div class="line">    <span class="comment">// 而该方法依赖 ClassRoom 对象，因此需要调用到 classRoomProvider.get 来获取 ClassRoom 的实例</span></div><div class="line">    <span class="keyword">return</span> Preconditions.checkNotNull(</div><div class="line">        <span class="keyword">module</span>.provideSubject(classRoomProvider.get()),</div><div class="line">        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</div><div class="line">  &#125;</div><div class="line"><span class="comment">// 该部分生成方法和以前的 ClassRoom_Factory 一样，有外层依赖，需要传入</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;Subject&gt; <span class="title">create</span><span class="params">(</span></span></div><div class="line">      SubjectModule <span class="keyword">module</span>, Provider&lt;ClassRoom&gt; classRoomProvider) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubjectModule_ProvideSubjectFactory(<span class="keyword">module</span>, classRoomProvider);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-UserComponent-java-gt-DaggerUserComponent-java"><a href="#2-UserComponent-java-gt-DaggerUserComponent-java" class="headerlink" title="(2) UserComponent.java =&gt; DaggerUserComponent.java"></a>(2) <code>UserComponent.java</code> =&gt; <code>DaggerUserComponent.java</code></h5><p>主要关注点三个</p>
<p>a.该部分添加了<code>@Component(modules = SubjectModule.class)</code> ，整体调用上有变化，需要外部传入 <code>SubjectModule</code>的实例</p>
<p>b.同时多了一个 <code>Provider&lt;Subject&gt; provideSubjectProvider</code>  </p>
<p>c. 因为<code>Dagger2</code> 通过上述 (1) 中 <code>@Provides</code> 所标记的函数，所需要的依赖判断出需要<code>ClassRoom</code>的实例提供者 ，因此有<code>classRoomProvider</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  	....  </div><div class="line">	<span class="keyword">private</span> Provider&lt;Subject&gt; provideSubjectProvider;</div><div class="line">	...</div><div class="line">  	...</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.classRoomProvider = ClassRoom_Factory.create(User_Factory.create());</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.provideSubjectProvider =</div><div class="line">          SubjectModule_ProvideSubjectFactory.create(builder.subjectModule, classRoomProvider);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.mainActivityMembersInjector = MainActivity_MembersInjector.create(provideSubjectProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(MainActivity mainActivity)</span> </span>&#123;</div><div class="line">      mainActivityMembersInjector.injectMembers(mainActivity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">      <span class="keyword">private</span> SubjectModule subjectModule;</div><div class="line">      ...</div><div class="line">      <span class="function"><span class="keyword">public</span> UserComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (subjectModule == <span class="keyword">null</span>) &#123;<span class="comment">// 2 如果为空，dagger 会自己创建一个</span></div><div class="line">          <span class="keyword">this</span>.subjectModule = <span class="keyword">new</span> SubjectModule();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DaggerUserComponent(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line">	<span class="comment">// 1 构造的时候可以传入 subjectModule</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Builder <span class="title">subjectModule</span><span class="params">(SubjectModule subjectModule)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subjectModule = Preconditions.checkNotNull(subjectModule);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
<blockquote>
<p>故而，配合调用链来看，上述代码注释中的 1，2需要注意</p>
<p>因为外部传入的 subjectModule 是由自己创建，控制的</p>
<p>而如果没有传入，<code>dagger</code> 会自动创建一个</p>
<p>如果当前 <code>DaggerUserComponent</code> 被重复使用，其 <code>subjectModule</code> 也会一直重复使用同一个</p>
<p>该部分具体看需求，不同情况不同使用</p>
</blockquote>
<h5 id="3-MainActivity-java-gt-MainActivity-MembersInjector-java"><a href="#3-MainActivity-java-gt-MainActivity-MembersInjector-java" class="headerlink" title="(3)MainActivity.java =&gt; MainActivity_MembersInjector.java"></a>(3)<code>MainActivity.java</code> =&gt; <code>MainActivity_MembersInjector.java</code></h5><p>其中 <code>MainActivity_MembersInjecto.java</code> 修改很小，和上面A部分情况类似</p>
<p>因为去掉了 <code>@Inject ClassRoom mClassRoom;</code>  故而就是把A部分的中<code>mClassRoomProvider</code> =&gt; <code>mSubjectModule</code></p>
<h4 id="3-第二种情况处理"><a href="#3-第二种情况处理" class="headerlink" title="3. 第二种情况处理"></a>3. 第二种情况处理</h4><p>我们需要从外面传入自己<code>new</code> 的实例，再调用 <code>Dagger</code> 来生成对应的实例。</p>
<p>可以借助 <code>SubjectModule</code> 构造函数，或者方法进行放入，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SubjectModule mSubjectModule = <span class="keyword">new</span> SubjectModule(<span class="keyword">new</span> ClassRoom());</div><div class="line">DaggerUserComponent.builder()</div><div class="line">	  .subjectModule(mSubjectModule)</div><div class="line">	  .build().injectTo(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">ClassRoom mClassRoom;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubjectModule</span><span class="params">(ClassRoom classRoom)</span></span>&#123;</div><div class="line">	mClassRoom = classRoom;</div><div class="line">   &#125;</div><div class="line">   ...</div><div class="line">   <span class="meta">@Provides</span> <span class="function">Subject <span class="title">provideSubject</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Subject(mClassRoom);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//也可以给出对外接口</span></div><div class="line"><span class="comment">//public void setClassRoom(ClassRoom classRoom)&#123;</span></div><div class="line">   <span class="comment">//    this.mClassRoom = classRoom;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>以上就是关于 <code>Dagger</code>  在面对多层依赖的简单情况下，生成代码的分析</p>
<p>其中关于 <code>@Module</code> <code>@Provides</code> 两个注解是关键部分，一个标注当前类是<code>Module</code>，一个标注的函数会生成<code>xxxModule_providexxxFactory</code> 从而为 <code>Component</code> 注入提供实例。</p>
<p>然后附上<code>Component</code> <code>Module</code> 和被注入类的整体关系图，因为上面写的比较详细，此处就只给一个整体图了</p>
<p> <img src="http://ob9rvakdw.bkt.clouddn.com/dagger2%20%E5%AD%A6%E4%B9%A0%28%E4%BA%8C%29.png" alt="dagger2 学习(二)"></p>
<blockquote>
<p>一家之言，如有错误，轻喷。</p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A02" target="_blank" rel="external">该部分代码A</a></p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A02.1Module" target="_blank" rel="external">该部分代码B</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前记录了最简单的&lt;code&gt;Dagger 2&lt;/code&gt;  使用，现在记录一下面对多层依赖时的问题，同时配合 &lt;code&gt;@Module
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dagger2 学习(一)</title>
    <link href="http://dove.im/2016/11/11/dagger2-%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://dove.im/2016/11/11/dagger2-学习-一/</id>
    <published>2016-11-11T09:39:59.000Z</published>
    <updated>2016-11-21T08:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A01" target="_blank" rel="external">该部分代码</a></p>
<p>记录一下自己的基本的认识，<code>Dagger 2</code> 的目的是为了解决依赖问题</p>
<p>当我们申明一个 <code>User mUser</code> 对象 ，此时<code>mUser</code> 并未实例化，而当我们需要实例化的时候，则需要调用<code>new User()</code></p>
<p>而使用<code>Dagger 2</code> 的时候，我们只需要 <code>@inject User mUser</code>  然后在<code>Activity</code>中调用<code>DaggerXXXX....inject(this)</code>即可(假设是Activity，也可以是其他任何类)，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@User</span> mUser;</div><div class="line"><span class="meta">@ClassRoom</span> mClassRoom;</div><div class="line">...</div><div class="line"></div><div class="line">DaggerXXXX....inject(<span class="keyword">this</span>)<span class="comment">// 只需要调用一次即可</span></div><div class="line">...</div><div class="line">mUser.get...</div><div class="line">mClassRomm.get...</div></pre></td></tr></table></figure>
<p>那为什么不直接<code>new User()</code> 呢，因为会面对一个依赖问题，而下面的例子并没有突出解决这个问题，所以暂且搁置不写，讨论到 <code>@Module</code> 时继续讨论( 面对 <code>new User(params...)</code> 时，需要其他依赖时， 配合 <code>@Module</code> 这个注解进行使用，会显得更干净)。</p>
<blockquote>
<p>下面的记录就是最简单的注入，主要搞定了 <code>new User()</code> 这类无依赖的注入问题</p>
</blockquote>
<h3 id="Dagger-2-基本使用"><a href="#Dagger-2-基本使用" class="headerlink" title="Dagger 2 基本使用"></a>Dagger 2 基本使用</h3><h4 id="1-inject-使用，-一共两种使用地方"><a href="#1-inject-使用，-一共两种使用地方" class="headerlink" title="1.@inject 使用， 一共两种使用地方"></a>1.<code>@inject</code> 使用， 一共两种使用地方</h4><h5 id="1-标记被注入的对象的构造方法"><a href="#1-标记被注入的对象的构造方法" class="headerlink" title="(1) 标记被注入的对象的构造方法"></a>(1) 标记被注入的对象的构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Inject</span><span class="comment">// 标注构造方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-标记注入目标处"><a href="#2-标记注入目标处" class="headerlink" title="(2) 标记注入目标处"></a>(2) 标记注入目标处</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    TextView mUserAgeTv;</div><div class="line">    <span class="meta">@Inject</span> User mUser;<span class="comment">// 标注注入的对象</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mUserAgeTv = (TextView) findViewById(R.id.user_age_tv);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样标注出了两个地方，一个被注入对象的构造方法，一个需要注入的对象，但是相互之间是没有关联的</p>
<p>写完这两个类，编译后，看一下生成的具体代码，验证一下</p>
<h5 id="3-Inject-public-User-后生成的代码"><a href="#3-Inject-public-User-后生成的代码" class="headerlink" title="(3) @Inject public User()... 后生成的代码"></a>(3) <code>@Inject public User()...</code> 后生成的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> User_Factory implements Factory&lt;User&gt; &#123;</div><div class="line">  INSTANCE;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();<span class="comment">// 真正生成 User 对象的地方</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;User&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> INSTANCE;<span class="comment">// 返还User_Factory 对象</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-Inject-User-mUser-生成的代码"><a href="#4-Inject-User-mUser-生成的代码" class="headerlink" title="(4) @Inject User mUser 生成的代码"></a>(4) <code>@Inject User mUser</code> 生成的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;User&gt; mUserProvider;<span class="comment">// 用来提供User对象的 Provider</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_MembersInjector</span><span class="params">(Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> mUserProvider != <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">this</span>.mUserProvider = mUserProvider;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MainActivity&gt; <span class="title">create</span><span class="params">(Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainActivity_MembersInjector(mUserProvider);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 看起来像注入的地方 调用了 userProvider 然后调用了 get</span></div><div class="line">    instance.mUser = mUserProvider.get();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectMUser</span><span class="params">(MainActivity instance, Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</div><div class="line">    <span class="comment">// 这个也是看起来像注入的地方 调用了 userProvider 然后调用了 get</span></div><div class="line">    instance.mUser = mUserProvider.get();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>仔细看，发现两者生成的代码现在是无关的，接下来引入连接的注解</p>
</blockquote>
<h4 id="2-Component-使用，连接上述的两个地方，进行注入"><a href="#2-Component-使用，连接上述的两个地方，进行注入" class="headerlink" title="2.@Component 使用，连接上述的两个地方，进行注入"></a>2.<code>@Component</code> 使用，连接上述的两个地方，进行注入</h4><h5 id="1-使用"><a href="#1-使用" class="headerlink" title="(1)使用"></a>(1)使用</h5><p>加入一个新的类，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span> <span class="comment">// 注解标记</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line">  <span class="comment">// 注意此处方法的参数 MainActivity ，由此标记处要注入的类，而方法名其实可以是任何名字</span></div><div class="line">  <span class="comment">// 被 @Component 标注的类，其具体编译后生成的代码，会有具体的实现类来处理，参考下文</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看文档，只知道这是一个连接的，也不知道具体怎么连接的，只知道会生成一个<code>DaggerUserComponent</code> 类，生成代码在具体调用分析处，可具体参考</p>
<p>在<code>MainActivity</code>加入 <code>DaggerUserComponent.builder().build().injectTo(this)</code> 就可以注入成功，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">MainActivity.java</div><div class="line">  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    TextView mUserAgeTv;</div><div class="line">    <span class="meta">@Inject</span> User mUser;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mUserAgeTv = (TextView) findViewById(R.id.user_age_tv);<span class="comment">// 加入这句</span></div><div class="line">        DaggerUserComponent.builder().build().injectTo(<span class="keyword">this</span>);</div><div class="line">        mUserAgeTv.setText(<span class="string">""</span> + mUser.getAge());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-那就结合调用整体，具体看下生成的代码吧"><a href="#2-那就结合调用整体，具体看下生成的代码吧" class="headerlink" title="(2)那就结合调用整体，具体看下生成的代码吧"></a>(2)那就结合调用整体，具体看下生成的代码吧</h5><p><code>DaggerUserComponent.builder().build().injectTo(this);</code></p>
<blockquote>
<p>调用主要分两条线，看注释</p>
<ul>
<li><p><code>..builder().build()</code></p>
<p>1 -&gt; 2 步骤 生成一个 <code>DaggerUserComponent</code> 对象，同时实例化出 <code>mainActivityMembersInjector</code></p>
</li>
<li><p><code>..injectTo(this);</code></p>
<p>3 步骤 是调用 <code>MainActivity_MembersInjector</code> 进行真正的注入</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">DaggerUserComponent.java</div><div class="line">  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerUserComponent</span> <span class="keyword">implements</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> MembersInjector&lt;MainActivity&gt; mainActivityMembersInjector;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerUserComponent</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> builder != <span class="keyword">null</span>;</div><div class="line">    initialize(builder);<span class="comment">//2.1 初始化 builder 对象</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();<span class="comment">// 1. 首先生成一个 Builder 对象</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> builder().build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</div><div class="line">	<span class="comment">// 2.2 关键处，它调用的是之前生成 MainActivity_MembersInjector 的 create 方法</span></div><div class="line">    <span class="keyword">this</span>.mainActivityMembersInjector = MainActivity_MembersInjector.create(User_Factory.create());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(MainActivity mainActivity)</span> </span>&#123;<span class="comment">//3. 最后调用 injectTo 方法</span></div><div class="line">    <span class="comment">// 3.1 mainActivityMembersInjector 它由 2.2 转换出来</span></div><div class="line">    mainActivityMembersInjector.injectMembers(mainActivity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UserComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerUserComponent(<span class="keyword">this</span>);<span class="comment">//2. 生成一个 DaggerUserComponent 对象</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上，整个连接过程就出来了</p>
<p>下图中 黄色部分，就是<code>builder().build()</code> 构建出<code>MainActivity_MembersInjector</code>，中间调用了 <code>User_Factory</code> 来生成<code>mUserProvider</code></p>
<p>下图紫色部分，就是<code>injectTo()</code> 进行注入，根据构建出的<code>MainActivity_MembersInjector</code>，获取 <code>User</code> 构建的实例，进行赋值</p>
<p> <img src="http://ob9rvakdw.bkt.clouddn.com/dagger2%E5%AD%A6%E4%B9%A0%28%E4%B8%80%29.png" alt="dagger2学习(一)"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>整个记录主要写了 Dagger 2 最基本的使用，处理了 <code>new User()</code> 此类操作。</p>
<p>当然这不是 <code>Dagger 2</code> 的精华部分，此处主要是为了看其生成的代码，及其基本的使用。</p>
<p>其生成的对应关系如下：</p>
<p><code>@User  mUser</code>  ===&gt; <code>User_Factory.java</code></p>
<p><code>@User public User(){}</code> ===&gt; <code>MainActivity_MembersInjector.java</code> (其中的  <code>Provider&lt;User&gt; mUserProvider</code> )</p>
<p><code>@Component UserComponent{...}</code> ===&gt; <code>DaggerUserComponent.java</code></p>
<p>其具体作用在上面的代码注释分析中已经写了，此处不重复</p>
<p>以上。</p>
<blockquote>
<p>一家之言，如有错误，轻喷。</p>
<p><a href="https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%A01" target="_blank" rel="external">该部分代码</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/flyer88/LearnDagger2/tree/%E5%AD%A6%E4%B9%
    
    </summary>
    
    
  </entry>
  
</feed>
