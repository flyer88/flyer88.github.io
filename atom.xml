<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>flyer</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-12T09:43:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>flyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dagger2 学习(一)</title>
    <link href="http://yoursite.com/2016/11/11/dagger2-%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/11/11/dagger2-学习-一/</id>
    <published>2016-11-11T09:39:59.000Z</published>
    <updated>2016-11-12T09:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>记录一下自己的基本的认识，<code>Dagger 2</code> 的目的是为了解决依赖问题</p>
<p>当我们申明一个 <code>User mUser</code> 对象 ，此时<code>mUser</code> 并未实例化，而当我们需要实例化的时候，则需要调用<code>new User()</code></p>
<p>而使用<code>Dagger 2</code> 的时候，我们只需要 <code>@inject User mUser</code>  然后在<code>Activity</code>中调用<code>DaggerXXXX....inject(this)</code>即可(假设是Activity，也可以是其他任何类)，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@User</span> mUser;</span><br><span class="line"><span class="annotation">@ClassRoom</span> mClassRoom;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DaggerXXXX....inject(<span class="keyword">this</span>)<span class="comment">// 只需要调用一次即可</span></span><br><span class="line">...</span><br><span class="line">mUser.get...</span><br><span class="line">mClassRomm.get...</span><br></pre></td></tr></table></figure>
<p>那为什么不直接<code>new User()</code> 呢，因为会面对一个依赖问题，而下面的例子并没有突出解决这个问题，所以暂且搁置不写，讨论到 <code>@Module</code> 时继续讨论( 面对 <code>new User(params...)</code> 时，需要其他依赖时， 配合 <code>@Module</code> 这个注解进行使用，会显得更干净)。</p>
<p>下面的记录就是最简单的注入</p>
<h3 id="Dagger_2_基本使用">Dagger 2 基本使用</h3><h4 id="1-@inject_使用，_一共两种使用地方">1.<code>@inject</code> 使用， 一共两种使用地方</h4><h5 id="(1)_标记被注入的对象的构造方法">(1) 标记被注入的对象的构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="(2)_标记注入目标处">(2) 标记注入目标处</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    TextView mUserAgeTv;</span><br><span class="line">    <span class="annotation">@Inject</span> User mUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mUserAgeTv = (TextView) findViewById(R.id.user_age_tv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样标注出了两个地方，一个被注入对象的构造方法，一个需要注入的对象，但是相互之间是没有关联的</p>
<p>写完这两个类，编译后，看一下生成的具体代码，验证一下</p>
<h5 id="(3)_@Inject_public_User()-_后生成的代码">(3) <code>@Inject public User()...</code> 后生成的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> User_Factory implements Factory&lt;User&gt; &#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();<span class="comment">// 真正生成 User 对象的地方</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;User&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;<span class="comment">// 返还User_Factory 对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="(4)_@Inject_User_mUser_生成的代码">(4) <code>@Inject User mUser</code> 生成的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">MainActivity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;User&gt; mUserProvider;<span class="comment">// 用来提供User对象的 Provider</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_MembersInjector</span><span class="params">(Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> mUserProvider != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.mUserProvider = mUserProvider;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;MainActivity&gt; <span class="title">create</span><span class="params">(Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MainActivity_MembersInjector(mUserProvider);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 看起来像注入的地方 调用了 userProvider 然后调用了 get</span></span><br><span class="line">    instance.mUser = mUserProvider.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectMUser</span><span class="params">(MainActivity instance, Provider&lt;User&gt; mUserProvider)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个也是看起来像注入的地方 调用了 userProvider 然后调用了 get</span></span><br><span class="line">    instance.mUser = mUserProvider.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>仔细看，发现两者生成的代码现在是无关的，接下来引入连接的注解</p>
</blockquote>
<h4 id="2-@Component_使用，连接上述的两个地方，进行注入">2.<code>@Component</code> 使用，连接上述的两个地方，进行注入</h4><h5 id="(1)使用">(1)使用</h5><p>加入一个新的类，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span> <span class="comment">// 注解标记</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(MainActivity mainActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看文档，只知道这是一个连接的，也不知道具体怎么连接的，只知道会生成一个<code>DaggerUserComponent</code> 类</p>
<p>在<code>MainActivity</code>加入 <code>DaggerUserComponent.builder().build().injectTo(this)</code> 就可以注入成功，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    TextView mUserAgeTv;</span><br><span class="line">    <span class="annotation">@Inject</span> User mUser;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mUserAgeTv = (TextView) findViewById(R.id.user_age_tv);<span class="comment">// 加入这句</span></span><br><span class="line">        DaggerUserComponent.builder().build().injectTo(<span class="keyword">this</span>);</span><br><span class="line">        mUserAgeTv.setText(<span class="string">""</span> + mUser.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="(2)那就结合调用整体，具体看下生成的代码吧">(2)那就结合调用整体，具体看下生成的代码吧</h5><p><code>DaggerUserComponent.builder().build().injectTo(this);</code></p>
<blockquote>
<p>调用主要分两条线，看注释</p>
<ul>
<li><p><code>..builder().build()</code></p>
<p>1 -&gt; 2 步骤 生成一个 <code>DaggerUserComponent</code> 对象，同时实例化出 <code>mainActivityMembersInjector</code></p>
</li>
<li><p><code>..injectTo(this);</code></p>
<p>3 步骤 是调用 <code>MainActivity_MembersInjector</code> 进行真正的注入</p>
<p>​</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerUserComponent</span> <span class="keyword">implements</span> <span class="title">UserComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MembersInjector&lt;MainActivity&gt; mainActivityMembersInjector;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DaggerUserComponent</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> builder != <span class="keyword">null</span>;</span><br><span class="line">    initialize(builder);<span class="comment">//2.1 初始化 builder 对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Builder();<span class="comment">// 1. 首先生成一个 Builder 对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserComponent <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> builder().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 2.2 关键处，它调用的是之前生成 MainActivity_MembersInjector 的 create 方法</span></span><br><span class="line">    <span class="keyword">this</span>.mainActivityMembersInjector = MainActivity_MembersInjector.create(User_Factory.create());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectTo</span><span class="params">(MainActivity mainActivity)</span> </span>&#123;<span class="comment">//3. 最后调用 injectTo 方法</span></span><br><span class="line">    <span class="comment">// 3.1 mainActivityMembersInjector 它由 2.2 转换出来</span></span><br><span class="line">    mainActivityMembersInjector.injectMembers(mainActivity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserComponent <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DaggerUserComponent(<span class="keyword">this</span>);<span class="comment">//2. 生成一个 DaggerUserComponent 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>综上，整个连接过程就出来了</p>
<p>下图中 黄色部分，就是<code>builder().build()</code> 构建出<code>MainActivity_MembersInjector</code>，中间调用了 <code>User_Factory</code> 来生成<code>mUserProvider</code></p>
<p>下图紫色部分，就是<code>injectTo()</code> 进行注入，根据构建出的<code>MainActivity_MembersInjector</code>，获取 <code>User</code> 构建的实例，进行赋值</p>
<p> <img src="http://ob9rvakdw.bkt.clouddn.com/dagger2%E5%AD%A6%E4%B9%A0%28%E4%B8%80%29.png" alt="dagger2学习(一)"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;&lt;p&gt;记录一下自己的基本的认识，&lt;code&gt;Dagger 2&lt;/code&gt; 的目的是为了解决依赖问题&lt;/p&gt;
&lt;p&gt;当我们申明一个 &lt;code&gt;User mUser&lt;/code&gt; 对象 ，此时&lt;code&gt;mUser&lt;/code&gt; 并未实例化，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://yoursite.com/2016/10/07/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://yoursite.com/2016/10/07/个人简历/</id>
    <published>2016-10-07T05:44:35.000Z</published>
    <updated>2016-10-07T05:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人基本信息">个人基本信息</h2><p><strong>姓名:</strong> 许鹏飞 </p>
<p><strong>学校及专业</strong>: 杭州电子科技大学 软件工程学院 本科 </p>
<p><strong>工作年限:</strong> 1年零6个月 </p>
<p><strong>联系方式:</strong> flyer88xu@gmail.com </p>
<p><strong>电话:</strong> 18667009152</p>
<p><strong>性别:</strong> 男 </p>
<p><strong>年龄:</strong> 23 </p>
<p><strong>GitHub:</strong> <a href="https://github.com/flyer88" target="_blank" rel="external">https://github.com/flyer88</a> </p>
<p><strong>个人博客:</strong> <a href="https://dove.im" target="_blank" rel="external">https://dove.im</a></p>
<p><strong>期望职位:</strong> Android 开发工程师 </p>
<p><strong>期望薪资:</strong> 税前 10k+ </p>
<p><strong>期望工作地:</strong> 杭州</p>
<hr>
<h2 id="工作经历">工作经历</h2><h3 id="杭州尘埃科技有限公司_Android_开发工程师">杭州尘埃科技有限公司 Android 开发工程师</h3><pre><code>本人在杭州尘埃科技有限公司 (2015.04-2016.06)任职 Android 开发工程师,共计一年零二个月,期间参与,设计并开发三个<span class="keyword">APP</span>,具体介绍如下：
</code></pre><h4 id="1-_【云集】-_Android_客户端(2015-04-2016-06)">1. 【云集】- Android 客户端(2015.04-2016.06)</h4><ul>
<li><p><strong>项目相关介绍:</strong> 一个浏览器应用,简洁,h5 性能高于 Chrome 等浏览器。 </p>
</li>
<li><p><strong>应用地址:</strong> <a href="http://yunji.one/" target="_blank" rel="external">http://yunji.one</a></p>
</li>
<li><p><strong>主要负责的工作:</strong></p>
<p>​    菜单栏模块,浏览器菜单栏的显示及功能具体实现 ,包括页面收藏动画及功能,分享模块实现,网页 刷新前进后退,已打开的网页应用列表显示,回到应用主页功能等等。整个用户模块,包括用户登陆注册登 录,用户数据同步。设置模块,夜间模式的实现,语言切换功能。</p>
</li>
<li><p><strong>相关处理及技术细节:</strong></p>
<ol>
<li>夜间模式的实现,由于应用最初设计是不带切换主题,选择的方案又是用自带的主题切换进行夜间模 式的实现,这中间会导致 <code>Activity</code> 会重建,从而闪屏,我用了 <code>fragment</code> 替换了整个设置界面,然后截屏当前 界面,遮盖,用一个 <code>alpha</code> 动画进行缓冲,重新生成 <code>fragment</code> 从而让整个夜间模式的切换非常柔和。</li>
<li>用户模块实现,前期对于用户数据模块的设计,单例类的实现,以及后期对用户数据同步模块的重 构,设计一个通用入口,隐藏具体实现,大量的减少代码,提高其重用性。这让我对面向对象编程的有一个 更为深入的了解。</li>
<li>最后还有一个比较比较自豪的技术小细节,就是主界面底部导航小点的动画效果,用自定义 <code>view</code> 实现,重写 <code>onDraw()</code> ,用 <code>Bezier</code> 曲线画出具体的弧线,是一个很好看的动画效果。</li>
</ol>
</li>
</ul>
<h4 id="2-_【Link】-_Android_客户端(2015-06-2016-06)">2. 【Link】- Android 客户端(2015.06-2016.06)</h4><ul>
<li><p><strong>项目相关介绍:</strong></p>
<p>​    一个工具型应用,主要作用是链接一些应用操作,提高应用使用的效率,例如一键同时发送文字等内容到 QQ 好友,微信朋友圈,微博。 </p>
</li>
<li><p><strong>应用地址:</strong> <a href="http://linkapps.io" target="_blank" rel="external">http://linkapps.io</a>    </p>
</li>
<li><p><strong>主要负责的工作:</strong></p>
<p>​    几乎整个 APP 的功能实现,例举几个重要部分,主界面商店界面实现,主要处理<code>ViewPage</code>和<code>GridView</code>的冲突。然后是云任务操作模块,具体单个操作的解析以及界面的实现。最重要的云任务运行模块,具体操作的实现,操作的链接,递归的设计,整体操作嵌入,界面的动画效果,长链接的实现。</p>
</li>
<li><p><strong>相关处理及技术细节:</strong></p>
<p>​    自认为处理和设计比较有特点的模块,操作链的实现与设计。没有采用循环实现每个操作,因为每个 操作的成功失败无法判断,所以用了一个尾递归实现,操作的成功失败,决定操作链继续和停止。然后整体 的设计让每个操作以一个插件的形式插入整个链接,同时考虑到大量操作是与后台有交互的,因此需要一个<code>web</code>端的回调<code>API</code>,同时需要进行操作的错误分发处理。</p>
</li>
</ul>
<h4 id="3-_【Pero】-_Android_客户端(2016-01-2016-06)">3. 【Pero】- Android 客户端(2016.01-2016.06)</h4><ul>
<li><p><strong>应用介绍:</strong> 图片社区应用。 </p>
</li>
<li><p><strong>应用地址:</strong> <a href="http://pero.moe" target="_blank" rel="external">http://pero.moe</a></p>
</li>
<li><p><strong>主要负责工作:</strong></p>
<p>​    几乎 <code>APP</code> 所有的模块开发与设计,例举部分重要内容,大量图片加载,本地图片缓存重用。上传模块 的设计与实现,第三方支付模块(支付宝)的接入,以及界面的实现。</p>
</li>
<li><p>相关处理及技术细节:</p>
<ol>
<li>第三方图库(<code>Glide</code>)的封装,同一封装,方便后期图库的替换,对<code>glide</code>的深入使用,包括图片本地缓存的使用,图片 token 过期的处理,图片画质的处理。</li>
<li><code>MVP</code> 架构的设计,单 <code>Activity</code> ,多个 <code>fragment</code> 组合成主界面,每个 <code>fragment</code> 有一个 <code>presenter</code> ,总的 <code>activity</code> 也持有一个 <code>fragment</code> ,从而保证三方之间通信通过主 <code>Activity</code> 的 <code>presenter</code> 进行。 </li>
<li>上传模块的实现,后台上传功能的实现,该模块最大的问题是大量图片的发送,图片上限是50张,发 送图片时,并发上传时,在统计发送数量值时,需要对该值加锁,否则会使得该值错误,从而一直显示上传界面,而无法结束。</li>
</ol>
</li>
</ul>
<p>​    </p>
<h3 id="杭州火小二科技有限公司_Android_开发工程师">杭州火小二科技有限公司 Android 开发工程师</h3><p>​    本人在杭州火小二科技有限司 (2016.07-2016.09)任职 Android 开发工程师,三个月，具体项目如下：</p>
<h4 id="【火掌柜】-_Android_客户端(2016-07-2016-10)">【火掌柜】- Android 客户端(2016.07-2016.10)</h4><ul>
<li><p><strong>应用介绍:</strong> 面向B端的餐饮客户端</p>
</li>
<li><p><strong>应用地址:</strong> <a href="http://2dfire.com/twodownload.html" target="_blank" rel="external">http://2dfire.com/twodownload.html</a></p>
</li>
<li><p><strong>主要负责工作:</strong></p>
<p>​    Dagger1 到 Dagger2 的技术升级，整个项目的混淆，提高安全性，部分小功能改造</p>
</li>
<li><p>相关处理及技术细节:</p>
<ol>
<li>老项目的 Dagger1 多数都是以单例静态方式使用，所以升级不难，麻烦的是注入的时候用的是 Object，所以需要一个反射，同时配合自己用<code>python</code>写的脚本，进行代码生成</li>
<li>混淆问题在于老项目太大，开启混下后报错信息高达 4000 多行，同时由于混淆过程中，项目多个<code>module</code>之间有同包名情况，无法进行单个模块混淆，因此只能在主<code>module</code>中处理，需要极大的耐性</li>
</ol>
</li>
</ul>
<h2 id="技能点">技能点</h2><ul>
<li><strong><code>Android</code> 技能点:</strong><ol>
<li>首先数据层,熟悉主流的网络请求方案,<code>OkHttpClient</code>+<code>Retrofit</code>+<code>RxJava</code>+<code>Gson</code>,本地存储上,熟悉 常用第三方库<code>greenDao</code>,并熟悉对其封装,也熟悉原生<code>SQLite</code>使用和封装,数据解析上,熟悉<code>xml</code>和<code>json</code>的解析常用解析方案,了解<code>protobuf</code>。</li>
<li>界面层,一般自定<code>view</code>都没问题,熟悉常见布局上及控件使用,包括 <code>RecycleView</code>,<code>GridView</code>,<code>ViewPager</code>等等。图片处理上,了解 <code>LurCache</code> ,使用过<code>Glide</code> 以及 <code>Fresco</code>,会做一些自定义的操作,例如本地图品缓存,画质控制等等。动画方面,常见的 <code>Property Animation</code>, <code>View Animation</code> 和<code>Drawable Animation</code> 等动画效果也较为熟悉,对 SVG 动画也在 demo 实现过。</li>
<li>架构上,了解常见的设计模式。熟悉自己构建 <code>MVP</code> 架构,在上述【Pero 项目】中已经实践过,感觉很不错,依赖什么的处 理也不错,在自己的 demo 上跑过 <code>Dagger 2</code>+<code>DataBinding</code>+<code>EventBus</code> 架构的,感觉比自己架构的好,代码简洁,正在深入看其注解生成的代码类,进行进一步掌握。了解常见的<code>dex</code>插桩类的热补丁方案。</li>
<li><code>Android</code>的容器化上(热部署)，了解过一些常见方案,跑过一些demo。其中自己写过 <code>dynamic-load-apk</code> 的缩小版(即代理方式实现的动态加载)，<code>native hook</code>方案只跑过现成框架，<code>React-Native</code>有接入过，但不怎么会写<code>JS</code>,<code>LuaView</code>方案没有去试验过</li>
<li>有基本的网络层知识，了解<code>DNS</code>，<code>HTTPS</code>的原理，会用常见的<code>Http</code>库，开发中喜欢<code>OkHttpClient</code> + <code>Retrofit</code></li>
<li>其他方面,熟悉常用的第三方统计和分析接入,包括友盟,<code>ShareSDK</code>,熟悉常见 <code>bug</code> 统计,熟悉用 <code>Android Studio</code> 进行代码混淆,多渠道打包等等。熟悉 <code>Android studio</code> 开发环境。</li>
</ol>
</li>
<li><strong>额外技能点:</strong><ol>
<li>开发技术上，了解一些后端知识,用 php 配合 <code>laravel</code>, 搭建过个人博客, 也偶尔会一点<code>python</code>写写脚本，正在学习<code>scala</code>，喜欢<code>scala</code>强悍的类型系统以及函数式的特性，熟悉 <code>macOS</code> 环境开发</li>
<li>设计上，喜欢<code>MD</code>设计，了解 <code>sketch</code> ,设计过自己的 毕业设计 <code>APP</code></li>
<li>合作技能，熟悉<code>git</code>，熟悉<code>tower</code>，钉钉等常用团队合作工具</li>
<li>附加技能，英语6级,配合词典无障碍阅读文档，自带梯子,熟练使用 <code>google</code> 和 <code>StackOverflow</code> 解决问题</li>
<li>最近正在学习的技能，编译原理的基础知识，<code>x86</code>汇编的基本知识。</li>
</ol>
</li>
</ul>
<p>​    </p>
<hr>
<h2 id="自我描述">自我描述</h2><ul>
<li><p>经历上</p>
<ol>
<li>本人大三跟随大神创业,写 <code>Android</code> 约一年半,共参加杭州尘埃科技公司三个项目。整个过程中，几乎从零开始自学<code>Android</code>，在专注 <code>Android</code> 的同时，折腾过一些其他的技术，包括 <code>Android</code>上的 VR demo，<code>Linux</code>服务器的一些知识，<code>Web</code>前后端的相关知识。</li>
<li>于6月份毕业，同时辞职，7月份入职杭州火小二科技有限公司，主要技术性上的包括上述的<code>Dagger</code>升级和混淆</li>
</ol>
<p>​    3. 现在专注于 <code>Android</code> 的深入,主要是针对源码的阅读,已在计划中的包括 <code>Handler</code> 机制,<code>View</code> 的事件传递以及 <code>xml</code> 的 <code>inflate</code>，目前以及完成对 <code>inflate</code> 源码的解析，并写了一个库(虽然没人star，蛤蛤)，正在看 <code>View</code> 的事件传递。</p>
</li>
<li><p>为人上</p>
<ol>
<li>对技术充满热情，喜欢技术驱动的工作氛围，有小小的技术崇拜。</li>
<li>工作负责，学习能力强，方向明确，积极向上，不怕折腾，爱折腾。</li>
<li>与人为善，能积极融入团队，三观端正，不用技术作恶。</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人基本信息&quot;&gt;个人基本信息&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;姓名:&lt;/strong&gt; 许鹏飞 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学校及专业&lt;/strong&gt;: 杭州电子科技大学 软件工程学院 本科 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作年限:&lt;/strong&gt; 1年零
    
    </summary>
    
    
  </entry>
  
</feed>
